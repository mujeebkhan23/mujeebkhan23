import { NgModule, Injector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { RouteInterceptorService } from './interceptors/route-interceptor.service';
import { HttpInterceptorService, HttpInterceptorServiceFactory } from './interceptors/http-interceptor.service';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { HttpObservableService } from './interceptors/http-observable.service';
import { LoadingPageDirective } from './loading-page.directive';
import * as ɵngcc0 from '@angular/core';
const HttpInterceptorServiceExistingProvider = {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpInterceptorService,
    multi: true
};
const ɵ0 = HttpInterceptorServiceFactory;
export class LoadingPageModule {
}
LoadingPageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingPageModule });
LoadingPageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingPageModule_Factory(t) { return new (t || LoadingPageModule)(); }, providers: [
        RouteInterceptorService,
        HttpObservableService,
        HttpInterceptorServiceExistingProvider,
        {
            provide: HttpInterceptorService,
            useFactory: ɵ0,
            deps: [Injector]
        }
    ], imports: [[
            CommonModule,
            HttpClientModule
        ], HttpClientModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingPageModule, { declarations: function () { return [LoadingPageDirective]; }, imports: function () { return [CommonModule,
        HttpClientModule]; }, exports: function () { return [HttpClientModule,
        LoadingPageDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingPageModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [
                    LoadingPageDirective
                ],
                exports: [
                    HttpClientModule,
                    LoadingPageDirective
                ],
                providers: [
                    RouteInterceptorService,
                    HttpObservableService,
                    HttpInterceptorServiceExistingProvider,
                    {
                        provide: HttpInterceptorService,
                        useFactory: ɵ0,
                        deps: [Injector]
                    }
                ]
            }]
    }], null, null); })();
export { ɵ0 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1wYWdlLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWxvYWRpbmctcGFnZS9zcmMvbGliL2xvYWRpbmctcGFnZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXhELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRS9FLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOztBQUVoRSxNQUFNLHNDQUFzQyxHQUFHO0FBQzlDLElBQUMsT0FBTyxFQUFFLGlCQUFpQjtBQUMzQixJQUFDLFdBQVcsRUFBRSxzQkFBc0I7QUFDcEMsSUFBQyxLQUFLLEVBQUUsSUFBSTtBQUNaLENBQUEsQ0FBQztBQUVGLFdBa0JrQiw2QkFBNkI7QUFLL0MsTUFBTSxPQUFPLGlCQUFpQjtBQUM5QjsrQ0F4QkMsUUFBUSxTQUFDO0lBQ1IsT0FBTyxFQUFFLHVCQUNQLFlBQVksdUJBQ1osZ0JBQWdCLG1CQUNqQixtQkFDRCxZQUFZLEVBQUU7T0FDWixvQkFBb0I7YUFDckI7Q0FDRCxPQUFPLEVBQUUsdUJBQ1A7Q0FBZ0I7Y0FDaEIsb0JBQW9CO1FBQ3JCLG1CQUNEO1FBQVMsRUFBRTtJQUNUO2lCQUF1QjtxQkFDdkI7Z0JBQXFCO1VBQ3JCO2VBQXNDLHVCQUN0QywyQkFDRSxPQUFPLEVBQUUsc0JBQXNCLDJCQUMvQixVQUFVLElBQStCLDJCQUN6QyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsdUJBQ2pCO0VBQ0YsZUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNLOztBQXhDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBb0JBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQXZCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBSb3V0ZUludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL3JvdXRlLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yU2VydmljZSwgSHR0cEludGVyY2VwdG9yU2VydmljZUZhY3RvcnkgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9odHRwLWludGVyY2VwdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwT2JzZXJ2YWJsZVNlcnZpY2UgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9odHRwLW9ic2VydmFibGUuc2VydmljZSc7XG5cbmltcG9ydCB7IExvYWRpbmdQYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9sb2FkaW5nLXBhZ2UuZGlyZWN0aXZlJztcblxuY29uc3QgSHR0cEludGVyY2VwdG9yU2VydmljZUV4aXN0aW5nUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICB1c2VFeGlzdGluZzogSHR0cEludGVyY2VwdG9yU2VydmljZSxcbiAgbXVsdGk6IHRydWVcbn07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgSHR0cENsaWVudE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBMb2FkaW5nUGFnZURpcmVjdGl2ZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICBMb2FkaW5nUGFnZURpcmVjdGl2ZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBSb3V0ZUludGVyY2VwdG9yU2VydmljZSxcbiAgICBIdHRwT2JzZXJ2YWJsZVNlcnZpY2UsXG4gICAgSHR0cEludGVyY2VwdG9yU2VydmljZUV4aXN0aW5nUHJvdmlkZXIsXG4gICAge1xuICAgICAgcHJvdmlkZTogSHR0cEludGVyY2VwdG9yU2VydmljZSxcbiAgICAgIHVzZUZhY3Rvcnk6IEh0dHBJbnRlcmNlcHRvclNlcnZpY2VGYWN0b3J5LFxuICAgICAgZGVwczogW0luamVjdG9yXVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nUGFnZU1vZHVsZSB7fVxuIl19