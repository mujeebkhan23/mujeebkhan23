import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { HttpObservableService } from './interceptors/http-observable.service';
import { RouteInterceptorService } from './interceptors/route-interceptor.service';
/*
 * mkLoadingPage Directive
 */
export class LoadingPageDirective {
    /**
     * @method constructor
     * @param privatehttpObservableService   [description]
     * @param privaterouteInterceptorService [description]
     * @param privatetemplateRef             [description]
     * @param privateviewContainer           [description]                                              [description]
     */
    constructor(httpObservableService, routeInterceptorService, templateRef, viewContainer) {
        this.httpObservableService = httpObservableService;
        this.routeInterceptorService = routeInterceptorService;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.isPendingRequests = false;
        this.isPendingRoute = false;
        this.hasView = false;
    }
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    ngOnChanges(changes) {
        if (changes.mkLoadingPage.currentValue) {
            this.mkLoadingPage = changes.mkLoadingPage.currentValue;
        }
        if (changes.mkLoadingPage.firstChange) {
            this.init();
        }
    }
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    init() {
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingHttp) {
            this.httpObservableService.isPendingRequests.subscribe(value => {
                this.isPendingRequests = value;
                this.isVisible();
            });
        }
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingRoute) {
            this.routeInterceptorService.isPendingRoute.subscribe(value => {
                this.isPendingRoute = value;
                this.isVisible();
            });
        }
    }
    /**
     * [isVisible description]
     * @method isVisible
     * @return [description]
     */
    isVisible() {
        if (this.hasView && !this.isPendingRequests && !this.isPendingRoute) {
            this.viewContainer.clear();
            this.hasView = false;
        }
        else if (!this.hasView && (this.isPendingRequests || this.isPendingRoute)) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.hasView = true;
        }
    }
}
LoadingPageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkLoadingPage]',
            },] }
];
LoadingPageDirective.ctorParameters = () => [
    { type: HttpObservableService },
    { type: RouteInterceptorService },
    { type: TemplateRef },
    { type: ViewContainerRef }
];
LoadingPageDirective.propDecorators = {
    mkLoadingPage: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1wYWdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9saWJyYXJ5L2FuZ3VsYXItbG9hZGluZy1wYWdlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9sb2FkaW5nLXBhZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFVbkY7O0dBRUc7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBUS9COzs7Ozs7T0FNRztJQUNILFlBQ1UscUJBQTRDLEVBQzVDLHVCQUFnRCxFQUNoRCxXQUE2QixFQUM3QixhQUErQjtRQUgvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQWxCbEMsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQzFCLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBRXRCLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFnQnJCLENBQUM7SUFFSjs7O09BR0c7SUFDSCxXQUFXLENBQUMsT0FBMEM7UUFDcEQsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRTtZQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1NBQ3pEO1FBQ0QsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRTtZQUNyQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssSUFBSTtRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7WUFDOUQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDN0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFO1lBQy9ELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM1RCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLFNBQVM7UUFDZixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ25FLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDdEI7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDM0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7OztZQWhCUSxxQkFBcUI7WUFDckIsdUJBQXVCO1lBRkwsV0FBVztZQUFFLGdCQUFnQjs7OzRCQXdCckQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cE9ic2VydmFibGVTZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcmNlcHRvcnMvaHR0cC1vYnNlcnZhYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUm91dGVJbnRlcmNlcHRvclNlcnZpY2UgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9yb3V0ZS1pbnRlcmNlcHRvci5zZXJ2aWNlJztcblxuLypcbiAqIE1rTG9hZGluZ1BhZ2UgSW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWtMb2FkaW5nUGFnZSB7XG4gIGNoZWNrUGVuZGluZ0h0dHA6IGJvb2xlYW47XG4gIGNoZWNrUGVuZGluZ1JvdXRlOiBib29sZWFuO1xufVxuXG4vKlxuICogbWtMb2FkaW5nUGFnZSBEaXJlY3RpdmVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rTG9hZGluZ1BhZ2VdJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ1BhZ2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBwdWJsaWMgaXNQZW5kaW5nUmVxdWVzdHMgPSBmYWxzZTtcbiAgcHVibGljIGlzUGVuZGluZ1JvdXRlID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBoYXNWaWV3ID0gZmFsc2U7XG5cbiAgQElucHV0KCkgbWtMb2FkaW5nUGFnZSE6IE1rTG9hZGluZ1BhZ2U7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHByaXZhdGVodHRwT2JzZXJ2YWJsZVNlcnZpY2UgICBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBwcml2YXRlcm91dGVJbnRlcmNlcHRvclNlcnZpY2UgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gcHJpdmF0ZXRlbXBsYXRlUmVmICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtIHByaXZhdGV2aWV3Q29udGFpbmVyICAgICAgICAgICBbZGVzY3JpcHRpb25dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cE9ic2VydmFibGVTZXJ2aWNlOiBIdHRwT2JzZXJ2YWJsZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZUludGVyY2VwdG9yU2VydmljZTogUm91dGVJbnRlcmNlcHRvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWZcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIG5nT25DaGFuZ2VzXG4gICAqIEBwYXJhbSBjaGFuZ2VzIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtbcHJvcEtleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlfSk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm1rTG9hZGluZ1BhZ2UuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLm1rTG9hZGluZ1BhZ2UgPSBjaGFuZ2VzLm1rTG9hZGluZ1BhZ2UuY3VycmVudFZhbHVlO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5ta0xvYWRpbmdQYWdlLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2luaXQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaW5pdFxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubWtMb2FkaW5nUGFnZSB8fCB0aGlzLm1rTG9hZGluZ1BhZ2UuY2hlY2tQZW5kaW5nSHR0cCkge1xuICAgICAgdGhpcy5odHRwT2JzZXJ2YWJsZVNlcnZpY2UuaXNQZW5kaW5nUmVxdWVzdHMuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgdGhpcy5pc1BlbmRpbmdSZXF1ZXN0cyA9IHZhbHVlO1xuICAgICAgICB0aGlzLmlzVmlzaWJsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1rTG9hZGluZ1BhZ2UgfHwgdGhpcy5ta0xvYWRpbmdQYWdlLmNoZWNrUGVuZGluZ1JvdXRlKSB7XG4gICAgICB0aGlzLnJvdXRlSW50ZXJjZXB0b3JTZXJ2aWNlLmlzUGVuZGluZ1JvdXRlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMuaXNQZW5kaW5nUm91dGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pc1Zpc2libGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbaXNWaXNpYmxlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGlzVmlzaWJsZVxuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgaXNWaXNpYmxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmhhc1ZpZXcgJiYgIXRoaXMuaXNQZW5kaW5nUmVxdWVzdHMgJiYgIXRoaXMuaXNQZW5kaW5nUm91dGUpIHtcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgdGhpcy5oYXNWaWV3ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghdGhpcy5oYXNWaWV3ICYmICh0aGlzLmlzUGVuZGluZ1JlcXVlc3RzIHx8IHRoaXMuaXNQZW5kaW5nUm91dGUpKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgdGhpcy5oYXNWaWV3ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==