import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { HttpObservableService } from './interceptors/http-observable.service';
import { RouteInterceptorService } from './interceptors/route-interceptor.service';
/*
 * mkLoadingPage Directive
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './interceptors/http-observable.service';
import * as ɵngcc2 from './interceptors/route-interceptor.service';
export class LoadingPageDirective {
    /**
     * @method constructor
     * @param privatehttpObservableService   [description]
     * @param privaterouteInterceptorService [description]
     * @param privatetemplateRef             [description]
     * @param privateviewContainer           [description]                                              [description]
     */
    constructor(httpObservableService, routeInterceptorService, templateRef, viewContainer) {
        this.httpObservableService = httpObservableService;
        this.routeInterceptorService = routeInterceptorService;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.isPendingRequests = false;
        this.isPendingRoute = false;
        this.hasView = false;
    }
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    ngOnChanges(changes) {
        if (changes.mkLoadingPage.currentValue) {
            this.mkLoadingPage = changes.mkLoadingPage.currentValue;
        }
        if (changes.mkLoadingPage.firstChange) {
            this.init();
        }
    }
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    init() {
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingHttp) {
            this.httpObservableService.isPendingRequests.subscribe(value => {
                this.isPendingRequests = value;
                this.isVisible();
            });
        }
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingRoute) {
            this.routeInterceptorService.isPendingRoute.subscribe(value => {
                this.isPendingRoute = value;
                this.isVisible();
            });
        }
    }
    /**
     * [isVisible description]
     * @method isVisible
     * @return [description]
     */
    isVisible() {
        if (this.hasView && !this.isPendingRequests && !this.isPendingRoute) {
            this.viewContainer.clear();
            this.hasView = false;
        }
        else if (!this.hasView && (this.isPendingRequests || this.isPendingRoute)) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.hasView = true;
        }
    }
}
LoadingPageDirective.ɵfac = function LoadingPageDirective_Factory(t) { return new (t || LoadingPageDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpObservableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RouteInterceptorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
LoadingPageDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LoadingPageDirective, selectors: [["", "mkLoadingPage", ""]], inputs: { mkLoadingPage: "mkLoadingPage" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
LoadingPageDirective.ctorParameters = () => [
    { type: HttpObservableService },
    { type: RouteInterceptorService },
    { type: TemplateRef },
    { type: ViewContainerRef }
];
LoadingPageDirective.propDecorators = {
    mkLoadingPage: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingPageDirective, [{
        type: Directive,
        args: [{
                selector: '[mkLoadingPage]'
            }]
    }], function () { return [{ type: ɵngcc1.HttpObservableService }, { type: ɵngcc2.RouteInterceptorService }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, { mkLoadingPage: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,