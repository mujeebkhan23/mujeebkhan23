import { Injectable, Injector } from '@angular/core';
import { HttpObservableService } from './http-observable.service';
import { finalize } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
export class HttpInterceptorService {
    /**
     * @method constructor
     * @param injector [description]
     */
    constructor(injector) {
        this.injector = injector;
        this.httpObservableService = injector.get(HttpObservableService);
    }
    /**
     * @method intercept
     * @param request [description]
     * @param next [description]
     */
    intercept(request, next) {
        this.httpObservableService.onRequestStart();
        return next.handle(request).pipe(finalize(() => {
            this.httpObservableService.onRequestDone();
        }));
    }
}
HttpInterceptorService.ɵfac = function HttpInterceptorService_Factory(t) { return new (t || HttpInterceptorService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
HttpInterceptorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptorService, factory: HttpInterceptorService.ɵfac });
HttpInterceptorService.ctorParameters = () => [
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpInterceptorService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
export function HttpInterceptorServiceFactory(injector) {
    return new HttpInterceptorService(injector);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWJyYXJ5L2FuZ3VsYXItbG9hZGluZy1wYWdlL3NyYy9saWIvaW50ZXJjZXB0b3JzL2h0dHAtaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUtyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDLE1BQU0sT0FBTyxzQkFBc0I7QUFBRyxJQUdwQztBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBRSxZQUFvQixRQUFrQjtBQUN4QyxRQURzQixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFDckMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNyRSxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7QUFBSSxRQUN4RCxJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDaEQsUUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM5QixRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3BCLFlBQVEsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ25ELFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO2tEQTFCQyxVQUFVO2tJQUNUO0FBQUM7QUFBZ0QsWUFUOUIsUUFBUTtBQUFHOzs7eUVBQUU7QUFxQ2xDLE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxRQUFrQjtBQUFJLElBQ2xFLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBIYW5kbGVyLCBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBIdHRwT2JzZXJ2YWJsZVNlcnZpY2UgfSBmcm9tICcuL2h0dHAtb2JzZXJ2YWJsZS5zZXJ2aWNlJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cEludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgaHR0cE9ic2VydmFibGVTZXJ2aWNlOiBIdHRwT2JzZXJ2YWJsZVNlcnZpY2U7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGluamVjdG9yIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gICAgdGhpcy5odHRwT2JzZXJ2YWJsZVNlcnZpY2UgPSBpbmplY3Rvci5nZXQoSHR0cE9ic2VydmFibGVTZXJ2aWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGludGVyY2VwdFxuICAgKiBAcGFyYW0gcmVxdWVzdCBbZGVzY3JpcHRpb25dXG4gICAqIEBwYXJhbSBuZXh0IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICB0aGlzLmh0dHBPYnNlcnZhYmxlU2VydmljZS5vblJlcXVlc3RTdGFydCgpO1xuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuaHR0cE9ic2VydmFibGVTZXJ2aWNlLm9uUmVxdWVzdERvbmUoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlRmFjdG9yeShpbmplY3RvcjogSW5qZWN0b3IpOiBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlKGluamVjdG9yKTtcbn1cbiJdfQ==