import { Injectable, Injector } from '@angular/core';
import { HttpObservableService } from './http-observable.service';
import { finalize } from 'rxjs/operators';
export class HttpInterceptorService {
    /**
     * @method constructor
     * @param injector [description]
     */
    constructor(injector) {
        this.injector = injector;
        this.httpObservableService = injector.get(HttpObservableService);
    }
    /**
     * @method intercept
     * @param request [description]
     * @param next [description]
     */
    intercept(request, next) {
        this.httpObservableService.onRequestStart();
        return next.handle(request).pipe(finalize(() => {
            this.httpObservableService.onRequestDone();
        }));
    }
}
HttpInterceptorService.decorators = [
    { type: Injectable }
];
HttpInterceptorService.ctorParameters = () => [
    { type: Injector }
];
export function HttpInterceptorServiceFactory(injector) {
    return new HttpInterceptorService(injector);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL2xpYnJhcnkvYW5ndWxhci1sb2FkaW5nLXBhZ2Uvc3JjLyIsInNvdXJjZXMiOlsibGliL2ludGVyY2VwdG9ycy9odHRwLWludGVyY2VwdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzFDLE1BQU0sT0FBTyxzQkFBc0I7SUFHakM7OztPQUdHO0lBQ0gsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDcEQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRTVDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzlCLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OztZQXpCRixVQUFVOzs7WUFSVSxRQUFROztBQXFDN0IsTUFBTSxVQUFVLDZCQUE2QixDQUFDLFFBQWtCO0lBQzlELE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGFuZGxlciwgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSHR0cE9ic2VydmFibGVTZXJ2aWNlIH0gZnJvbSAnLi9odHRwLW9ic2VydmFibGUuc2VydmljZSc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBJbnRlcmNlcHRvclNlcnZpY2UgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIGh0dHBPYnNlcnZhYmxlU2VydmljZTogSHR0cE9ic2VydmFibGVTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBpbmplY3RvciBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIHRoaXMuaHR0cE9ic2VydmFibGVTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0KEh0dHBPYnNlcnZhYmxlU2VydmljZSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBpbnRlcmNlcHRcbiAgICogQHBhcmFtIHJlcXVlc3QgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcGFyYW0gbmV4dCBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgdGhpcy5odHRwT2JzZXJ2YWJsZVNlcnZpY2Uub25SZXF1ZXN0U3RhcnQoKTtcblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KS5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICB0aGlzLmh0dHBPYnNlcnZhYmxlU2VydmljZS5vblJlcXVlc3REb25lKCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gSHR0cEludGVyY2VwdG9yU2VydmljZUZhY3RvcnkoaW5qZWN0b3I6IEluamVjdG9yKTogSHR0cEludGVyY2VwdG9yU2VydmljZSB7XG4gIHJldHVybiBuZXcgSHR0cEludGVyY2VwdG9yU2VydmljZShpbmplY3Rvcik7XG59XG4iXX0=