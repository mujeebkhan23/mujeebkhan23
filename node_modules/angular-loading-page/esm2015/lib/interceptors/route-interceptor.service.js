import { Injectable, Optional } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { Subject } from 'rxjs';
export class RouteInterceptorService {
    /**
     * @method constructor
     */
    constructor(router) {
        this.router = router;
        this.isPendingRouteSubject = new Subject();
        if (this.router) {
            router.events.subscribe((event) => {
                this.routerInterceptor(event);
            });
        }
    }
    /**
     * [isPendingRoute description]
     * @method isPendingRoute
     * @return [description]
     */
    get isPendingRoute() {
        return this.isPendingRouteSubject.asObservable();
    }
    /**
     * [routerInterceptor description]
     * @method routerInterceptor
     * @param event [description]
     */
    routerInterceptor(event) {
        if (event instanceof NavigationStart) {
            this.onRouteStart();
        }
        if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {
            this.onRouteDone();
        }
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRouteStart() {
        this.isPendingRouteSubject.next(true);
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRouteDone() {
        this.isPendingRouteSubject.next(false);
    }
}
RouteInterceptorService.decorators = [
    { type: Injectable }
];
RouteInterceptorService.ctorParameters = () => [
    { type: Router, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtaW50ZXJjZXB0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9saWJyYXJ5L2FuZ3VsYXItbG9hZGluZy1wYWdlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvcm91dGUtaW50ZXJjZXB0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsTUFBTSxFQUF3QixlQUFlLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWxJLE9BQU8sRUFBZ0IsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzdDLE1BQU0sT0FBTyx1QkFBdUI7SUFHbEM7O09BRUc7SUFDSCxZQUFnQyxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUx0QywwQkFBcUIsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBTXJELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBa0IsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssaUJBQWlCLENBQUMsS0FBa0I7UUFDMUMsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtRQUNELElBQUksS0FBSyxZQUFZLGFBQWEsSUFBSSxLQUFLLFlBQVksZ0JBQWdCLElBQUksS0FBSyxZQUFZLGVBQWUsRUFBRTtZQUMzRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssWUFBWTtRQUNsQixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7SUFDSyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBcERGLFVBQVU7OztZQUpGLE1BQU0sdUJBV0EsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIEV2ZW50IGFzIFJvdXRlckV2ZW50LCBOYXZpZ2F0aW9uU3RhcnQsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FcnJvciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgLCAgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm91dGVJbnRlcmNlcHRvclNlcnZpY2Uge1xuICBwcml2YXRlIGlzUGVuZGluZ1JvdXRlU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHtcbiAgICBpZiAodGhpcy5yb3V0ZXIpIHtcbiAgICAgIHJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChldmVudDogUm91dGVyRXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5yb3V0ZXJJbnRlcmNlcHRvcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW2lzUGVuZGluZ1JvdXRlIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGlzUGVuZGluZ1JvdXRlXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGlzUGVuZGluZ1JvdXRlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmlzUGVuZGluZ1JvdXRlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbcm91dGVySW50ZXJjZXB0b3IgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgcm91dGVySW50ZXJjZXB0b3JcbiAgICogQHBhcmFtIGV2ZW50IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIHByaXZhdGUgcm91dGVySW50ZXJjZXB0b3IoZXZlbnQ6IFJvdXRlckV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgICB0aGlzLm9uUm91dGVTdGFydCgpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kIHx8IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCB8fCBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FcnJvcikge1xuICAgICAgdGhpcy5vblJvdXRlRG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbb25SZXF1ZXN0U3RhcnQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgb25SZXF1ZXN0U3RhcnRcbiAgICovXG4gIHByaXZhdGUgb25Sb3V0ZVN0YXJ0KCk6IHZvaWQge1xuICAgIHRoaXMuaXNQZW5kaW5nUm91dGVTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogW29uUmVxdWVzdERvbmUgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgb25SZXF1ZXN0RG9uZVxuICAgKi9cbiAgcHJpdmF0ZSBvblJvdXRlRG9uZSgpOiB2b2lkIHtcbiAgICB0aGlzLmlzUGVuZGluZ1JvdXRlU3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgfVxufVxuIl19