import { Injectable, Optional } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
export class RouteInterceptorService {
    /**
     * @method constructor
     */
    constructor(router) {
        this.router = router;
        this.isPendingRouteSubject = new Subject();
        if (this.router) {
            router.events.subscribe((event) => {
                this.routerInterceptor(event);
            });
        }
    }
    /**
     * [isPendingRoute description]
     * @method isPendingRoute
     * @return [description]
     */
    get isPendingRoute() {
        return this.isPendingRouteSubject.asObservable();
    }
    /**
     * [routerInterceptor description]
     * @method routerInterceptor
     * @param event [description]
     */
    routerInterceptor(event) {
        if (event instanceof NavigationStart) {
            this.onRouteStart();
        }
        if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {
            this.onRouteDone();
        }
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRouteStart() {
        this.isPendingRouteSubject.next(true);
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRouteDone() {
        this.isPendingRouteSubject.next(false);
    }
}
RouteInterceptorService.ɵfac = function RouteInterceptorService_Factory(t) { return new (t || RouteInterceptorService)(ɵngcc0.ɵɵinject(ɵngcc1.Router, 8)); };
RouteInterceptorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RouteInterceptorService, factory: RouteInterceptorService.ɵfac });
RouteInterceptorService.ctorParameters = () => [
    { type: Router, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouteInterceptorService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Router, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtaW50ZXJjZXB0b3Iuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWxvYWRpbmctcGFnZS9zcmMvbGliL2ludGVyY2VwdG9ycy9yb3V0ZS1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQXdCLGVBQWUsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEksT0FBTyxFQUFnQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUc3QyxNQUFNLE9BQU8sdUJBQXVCO0FBQ3BDLElBRUU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFlBQWdDLE1BQWM7QUFDaEQsUUFEa0MsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBTHZDLDBCQUFxQixHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7QUFDekQsUUFLSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDckIsWUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRTtBQUNyRCxnQkFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFO0FBRUosT0FESztBQUNMLElBQUUsSUFBSSxjQUFjO0FBQUssUUFDckIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRTtBQUVKLE9BREs7QUFDTCxJQUFVLGlCQUFpQixDQUFDLEtBQWtCO0FBQUksUUFDOUMsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO0FBQzFDLFlBQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzFCLFNBQUs7QUFDTCxRQUFJLElBQUksS0FBSyxZQUFZLGFBQWEsSUFBSSxLQUFLLFlBQVksZ0JBQWdCLElBQUksS0FBSyxZQUFZLGVBQWUsRUFBRTtBQUNqSCxZQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6QixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0U7QUFDRSxPQUFDO0FBQ0wsSUFBVSxZQUFZO0FBQUssUUFDdkIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQyxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTCxJQUFVLFdBQVc7QUFBSyxRQUN0QixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNDLElBQUUsQ0FBQztBQUNIO21EQXJEQyxVQUFVO3FJQUNUO0FBQUM7QUFDVSxZQU5KLE1BQU0sdUJBV0EsUUFBUTtBQUFNOzs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgRXZlbnQgYXMgUm91dGVyRXZlbnQsIE5hdmlnYXRpb25TdGFydCwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVycm9yIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSAsICBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb3V0ZUludGVyY2VwdG9yU2VydmljZSB7XG4gIHByaXZhdGUgaXNQZW5kaW5nUm91dGVTdWJqZWN0ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAvKipcbiAgICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICAgIGlmICh0aGlzLnJvdXRlcikge1xuICAgICAgcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoKGV2ZW50OiBSb3V0ZXJFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLnJvdXRlckludGVyY2VwdG9yKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbaXNQZW5kaW5nUm91dGUgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2QgaXNQZW5kaW5nUm91dGVcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgaXNQZW5kaW5nUm91dGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuaXNQZW5kaW5nUm91dGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFtyb3V0ZXJJbnRlcmNlcHRvciBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCByb3V0ZXJJbnRlcmNlcHRvclxuICAgKiBAcGFyYW0gZXZlbnQgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgcHJpdmF0ZSByb3V0ZXJJbnRlcmNlcHRvcihldmVudDogUm91dGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uU3RhcnQpIHtcbiAgICAgIHRoaXMub25Sb3V0ZVN0YXJ0KCk7XG4gICAgfVxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsIHx8IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVycm9yKSB7XG4gICAgICB0aGlzLm9uUm91dGVEb25lKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtvblJlcXVlc3RTdGFydCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvblJlcXVlc3RTdGFydFxuICAgKi9cbiAgcHJpdmF0ZSBvblJvdXRlU3RhcnQoKTogdm9pZCB7XG4gICAgdGhpcy5pc1BlbmRpbmdSb3V0ZVN1YmplY3QubmV4dCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbb25SZXF1ZXN0RG9uZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvblJlcXVlc3REb25lXG4gICAqL1xuICBwcml2YXRlIG9uUm91dGVEb25lKCk6IHZvaWQge1xuICAgIHRoaXMuaXNQZW5kaW5nUm91dGVTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICB9XG59XG4iXX0=