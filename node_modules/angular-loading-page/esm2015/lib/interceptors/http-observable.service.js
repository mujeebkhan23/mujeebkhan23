import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export class HttpObservableService {
    constructor() {
        this.pendingRequestsCounter = 0;
        this.isPendingRequestsSubject = new Subject();
    }
    /**
     * [isPendingRequests description]
     * @method isPendingRequests
     * @return [description]
     */
    get isPendingRequests() {
        return this.isPendingRequestsSubject.asObservable();
    }
    /**
     * [pendingRequests description]
     * @method pendingRequests
     * @return [description]
     */
    get pendingRequests() {
        return this.pendingRequestsCounter;
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRequestStart() {
        this.pendingRequestsCounter++;
        if (this.pendingRequestsCounter === 1) {
            this.isPendingRequestsSubject.next(true);
        }
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRequestDone() {
        this.pendingRequestsCounter--;
        if (this.pendingRequestsCounter === 0) {
            this.isPendingRequestsSubject.next(false);
        }
    }
}
HttpObservableService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1vYnNlcnZhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWxvYWRpbmctcGFnZS9zcmMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2h0dHAtb2JzZXJ2YWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFnQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFLN0MsTUFBTSxPQUFPLHFCQUFxQjtJQURsQztRQUVVLDJCQUFzQixHQUFHLENBQUMsQ0FBQztRQUMzQiw2QkFBd0IsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0lBMkM1RCxDQUFDO0lBekNDOzs7O09BSUc7SUFDSCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksY0FBYztRQUNuQixJQUFJLENBQUMsc0JBQXNCLEVBQUcsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhO1FBQ2xCLElBQUksQ0FBQyxzQkFBc0IsRUFBRyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLHNCQUFzQixLQUFLLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQzs7O1lBN0NGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgLCAgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBPYnNlcnZhYmxlU2VydmljZSB7XG4gIHByaXZhdGUgcGVuZGluZ1JlcXVlc3RzQ291bnRlciA9IDA7XG4gIHByaXZhdGUgaXNQZW5kaW5nUmVxdWVzdHNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAvKipcbiAgICogW2lzUGVuZGluZ1JlcXVlc3RzIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIGlzUGVuZGluZ1JlcXVlc3RzXG4gICAqIEByZXR1cm4gW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZ2V0IGlzUGVuZGluZ1JlcXVlc3RzKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmlzUGVuZGluZ1JlcXVlc3RzU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbcGVuZGluZ1JlcXVlc3RzIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIHBlbmRpbmdSZXF1ZXN0c1xuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBwZW5kaW5nUmVxdWVzdHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nUmVxdWVzdHNDb3VudGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFtvblJlcXVlc3RTdGFydCBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvblJlcXVlc3RTdGFydFxuICAgKi9cbiAgcHVibGljIG9uUmVxdWVzdFN0YXJ0KCk6IHZvaWQge1xuICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzQ291bnRlciArKztcblxuICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0c0NvdW50ZXIgPT09IDEpIHtcbiAgICAgIHRoaXMuaXNQZW5kaW5nUmVxdWVzdHNTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFtvblJlcXVlc3REb25lIGRlc2NyaXB0aW9uXVxuICAgKiBAbWV0aG9kIG9uUmVxdWVzdERvbmVcbiAgICovXG4gIHB1YmxpYyBvblJlcXVlc3REb25lKCk6IHZvaWQge1xuICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzQ291bnRlciAtLTtcblxuICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0c0NvdW50ZXIgPT09IDApIHtcbiAgICAgIHRoaXMuaXNQZW5kaW5nUmVxdWVzdHNTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICAgIH1cbiAgfVxufVxuIl19