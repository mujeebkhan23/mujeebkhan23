import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export class HttpObservableService {
    constructor() {
        this.pendingRequestsCounter = 0;
        this.isPendingRequestsSubject = new Subject();
    }
    /**
     * [isPendingRequests description]
     * @method isPendingRequests
     * @return [description]
     */
    get isPendingRequests() {
        return this.isPendingRequestsSubject.asObservable();
    }
    /**
     * [pendingRequests description]
     * @method pendingRequests
     * @return [description]
     */
    get pendingRequests() {
        return this.pendingRequestsCounter;
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRequestStart() {
        this.pendingRequestsCounter++;
        if (this.pendingRequestsCounter === 1) {
            this.isPendingRequestsSubject.next(true);
        }
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRequestDone() {
        this.pendingRequestsCounter--;
        if (this.pendingRequestsCounter === 0) {
            this.isPendingRequestsSubject.next(false);
        }
    }
}
HttpObservableService.ɵfac = function HttpObservableService_Factory(t) { return new (t || HttpObservableService)(); };
HttpObservableService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpObservableService, factory: HttpObservableService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HttpObservableService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1vYnNlcnZhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYnJhcnkvYW5ndWxhci1sb2FkaW5nLXBhZ2Uvc3JjL2xpYi9pbnRlcmNlcHRvcnMvaHR0cC1vYnNlcnZhYmxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWdCLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLN0MsTUFBTSxPQUFPLHFCQUFxQjtBQUNqQyxJQUZEO0FBQ0csUUFDTywyQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDcEMsUUFBUyw2QkFBd0IsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0FBRTVELElBeUNBLENBQUM7QUFDQSxJQTFDQztBQUNEO0FBQ0c7QUFDRztBQUVILE9BREM7QUFDSixJQUFDLElBQUksaUJBQWlCO0FBQU0sUUFDekIsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkQsSUFBQyxDQUFDO0FBRUgsSUFBRTtBQUNEO0FBQ0c7QUFDRztBQUVILE9BREM7QUFDSixJQUFDLElBQUksZUFBZTtBQUFNLFFBQ3ZCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDO0FBQ3RDLElBQUMsQ0FBQztBQUVILElBQUU7QUFDRDtBQUNHO0FBRUgsT0FESTtBQUNKLElBQVEsY0FBYztBQUFNLFFBQ3pCLElBQUksQ0FBQyxzQkFBc0IsRUFBRyxDQUFDO0FBRW5DLFFBQUksSUFBSSxJQUFJLENBQUMsc0JBQXNCLEtBQUssQ0FBQyxFQUFFO0FBQzFDLFlBQUssSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QyxTQUFJO0FBQ0osSUFBQyxDQUFDO0FBRUgsSUFBRTtBQUNEO0FBQ0c7QUFFSCxPQURJO0FBQ0osSUFBUSxhQUFhO0FBQU0sUUFDeEIsSUFBSSxDQUFDLHNCQUFzQixFQUFHLENBQUM7QUFFbkMsUUFBSSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxDQUFDLEVBQUU7QUFDMUMsWUFBSyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLFNBQUk7QUFDSixJQUFDLENBQUM7QUFDRjttREE5Q0EsVUFBVTs7Ozs7QUFOQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUEyQ0EsQUFBQSxBQXpDQSxBQUlBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBSUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUdBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQTdDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlICwgIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwT2JzZXJ2YWJsZVNlcnZpY2Uge1xuICBwcml2YXRlIHBlbmRpbmdSZXF1ZXN0c0NvdW50ZXIgPSAwO1xuICBwcml2YXRlIGlzUGVuZGluZ1JlcXVlc3RzU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgLyoqXG4gICAqIFtpc1BlbmRpbmdSZXF1ZXN0cyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBpc1BlbmRpbmdSZXF1ZXN0c1xuICAgKiBAcmV0dXJuIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGdldCBpc1BlbmRpbmdSZXF1ZXN0cygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5pc1BlbmRpbmdSZXF1ZXN0c1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICAvKipcbiAgICogW3BlbmRpbmdSZXF1ZXN0cyBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBwZW5kaW5nUmVxdWVzdHNcbiAgICogQHJldHVybiBbZGVzY3JpcHRpb25dXG4gICAqL1xuICBnZXQgcGVuZGluZ1JlcXVlc3RzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1JlcXVlc3RzQ291bnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBbb25SZXF1ZXN0U3RhcnQgZGVzY3JpcHRpb25dXG4gICAqIEBtZXRob2Qgb25SZXF1ZXN0U3RhcnRcbiAgICovXG4gIHB1YmxpYyBvblJlcXVlc3RTdGFydCgpOiB2b2lkIHtcbiAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0c0NvdW50ZXIgKys7XG5cbiAgICBpZiAodGhpcy5wZW5kaW5nUmVxdWVzdHNDb3VudGVyID09PSAxKSB7XG4gICAgICB0aGlzLmlzUGVuZGluZ1JlcXVlc3RzU3ViamVjdC5uZXh0KHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBbb25SZXF1ZXN0RG9uZSBkZXNjcmlwdGlvbl1cbiAgICogQG1ldGhvZCBvblJlcXVlc3REb25lXG4gICAqL1xuICBwdWJsaWMgb25SZXF1ZXN0RG9uZSgpOiB2b2lkIHtcbiAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0c0NvdW50ZXIgLS07XG5cbiAgICBpZiAodGhpcy5wZW5kaW5nUmVxdWVzdHNDb3VudGVyID09PSAwKSB7XG4gICAgICB0aGlzLmlzUGVuZGluZ1JlcXVlc3RzU3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==