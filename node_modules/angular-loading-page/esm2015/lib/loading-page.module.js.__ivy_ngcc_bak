import { NgModule, Injector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { RouteInterceptorService } from './interceptors/route-interceptor.service';
import { HttpInterceptorService, HttpInterceptorServiceFactory } from './interceptors/http-interceptor.service';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { HttpObservableService } from './interceptors/http-observable.service';
import { LoadingPageDirective } from './loading-page.directive';
const HttpInterceptorServiceExistingProvider = {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpInterceptorService,
    multi: true
};
const ɵ0 = HttpInterceptorServiceFactory;
export class LoadingPageModule {
}
LoadingPageModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [
                    LoadingPageDirective
                ],
                exports: [
                    HttpClientModule,
                    LoadingPageDirective
                ],
                providers: [
                    RouteInterceptorService,
                    HttpObservableService,
                    HttpInterceptorServiceExistingProvider,
                    {
                        provide: HttpInterceptorService,
                        useFactory: ɵ0,
                        deps: [Injector]
                    }
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1wYWdlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9saWJyYXJ5L2FuZ3VsYXItbG9hZGluZy1wYWdlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9sb2FkaW5nLXBhZ2UubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUUvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRSxNQUFNLHNDQUFzQyxHQUFHO0lBQzdDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLHNCQUFzQjtJQUNuQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7V0FvQmdCLDZCQUE2QjtBQUsvQyxNQUFNLE9BQU8saUJBQWlCOzs7WUF2QjdCLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixnQkFBZ0I7aUJBQ2pCO2dCQUNELFlBQVksRUFBRTtvQkFDWixvQkFBb0I7aUJBQ3JCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxnQkFBZ0I7b0JBQ2hCLG9CQUFvQjtpQkFDckI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULHVCQUF1QjtvQkFDdkIscUJBQXFCO29CQUNyQixzQ0FBc0M7b0JBQ3RDO3dCQUNFLE9BQU8sRUFBRSxzQkFBc0I7d0JBQy9CLFVBQVUsSUFBK0I7d0JBQ3pDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQztxQkFDakI7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IFJvdXRlSW50ZXJjZXB0b3JTZXJ2aWNlIH0gZnJvbSAnLi9pbnRlcmNlcHRvcnMvcm91dGUtaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlLCBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL2h0dHAtaW50ZXJjZXB0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEh0dHBPYnNlcnZhYmxlU2VydmljZSB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL2h0dHAtb2JzZXJ2YWJsZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTG9hZGluZ1BhZ2VEaXJlY3RpdmUgfSBmcm9tICcuL2xvYWRpbmctcGFnZS5kaXJlY3RpdmUnO1xuXG5jb25zdCBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlRXhpc3RpbmdQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gIHVzZUV4aXN0aW5nOiBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIExvYWRpbmdQYWdlRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIExvYWRpbmdQYWdlRGlyZWN0aXZlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIFJvdXRlSW50ZXJjZXB0b3JTZXJ2aWNlLFxuICAgIEh0dHBPYnNlcnZhYmxlU2VydmljZSxcbiAgICBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlRXhpc3RpbmdQcm92aWRlcixcbiAgICB7XG4gICAgICBwcm92aWRlOiBIdHRwSW50ZXJjZXB0b3JTZXJ2aWNlLFxuICAgICAgdXNlRmFjdG9yeTogSHR0cEludGVyY2VwdG9yU2VydmljZUZhY3RvcnksXG4gICAgICBkZXBzOiBbSW5qZWN0b3JdXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExvYWRpbmdQYWdlTW9kdWxlIHt9XG4iXX0=