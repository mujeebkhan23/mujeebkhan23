import { Injectable, Optional, Injector, Directive, TemplateRef, ViewContainerRef, Input, NgModule, Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { finalize } from 'rxjs/operators';

class RouteInterceptorService {
    /**
     * @method constructor
     */
    constructor(router) {
        this.router = router;
        this.isPendingRouteSubject = new Subject();
        if (this.router) {
            router.events.subscribe((event) => {
                this.routerInterceptor(event);
            });
        }
    }
    /**
     * [isPendingRoute description]
     * @method isPendingRoute
     * @return [description]
     */
    get isPendingRoute() {
        return this.isPendingRouteSubject.asObservable();
    }
    /**
     * [routerInterceptor description]
     * @method routerInterceptor
     * @param event [description]
     */
    routerInterceptor(event) {
        if (event instanceof NavigationStart) {
            this.onRouteStart();
        }
        if (event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {
            this.onRouteDone();
        }
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRouteStart() {
        this.isPendingRouteSubject.next(true);
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRouteDone() {
        this.isPendingRouteSubject.next(false);
    }
}
RouteInterceptorService.decorators = [
    { type: Injectable }
];
RouteInterceptorService.ctorParameters = () => [
    { type: Router, decorators: [{ type: Optional }] }
];

class HttpObservableService {
    constructor() {
        this.pendingRequestsCounter = 0;
        this.isPendingRequestsSubject = new Subject();
    }
    /**
     * [isPendingRequests description]
     * @method isPendingRequests
     * @return [description]
     */
    get isPendingRequests() {
        return this.isPendingRequestsSubject.asObservable();
    }
    /**
     * [pendingRequests description]
     * @method pendingRequests
     * @return [description]
     */
    get pendingRequests() {
        return this.pendingRequestsCounter;
    }
    /**
     * [onRequestStart description]
     * @method onRequestStart
     */
    onRequestStart() {
        this.pendingRequestsCounter++;
        if (this.pendingRequestsCounter === 1) {
            this.isPendingRequestsSubject.next(true);
        }
    }
    /**
     * [onRequestDone description]
     * @method onRequestDone
     */
    onRequestDone() {
        this.pendingRequestsCounter--;
        if (this.pendingRequestsCounter === 0) {
            this.isPendingRequestsSubject.next(false);
        }
    }
}
HttpObservableService.decorators = [
    { type: Injectable }
];

class HttpInterceptorService {
    /**
     * @method constructor
     * @param injector [description]
     */
    constructor(injector) {
        this.injector = injector;
        this.httpObservableService = injector.get(HttpObservableService);
    }
    /**
     * @method intercept
     * @param request [description]
     * @param next [description]
     */
    intercept(request, next) {
        this.httpObservableService.onRequestStart();
        return next.handle(request).pipe(finalize(() => {
            this.httpObservableService.onRequestDone();
        }));
    }
}
HttpInterceptorService.decorators = [
    { type: Injectable }
];
HttpInterceptorService.ctorParameters = () => [
    { type: Injector }
];
function HttpInterceptorServiceFactory(injector) {
    return new HttpInterceptorService(injector);
}

/*
 * mkLoadingPage Directive
 */
class LoadingPageDirective {
    /**
     * @method constructor
     * @param privatehttpObservableService   [description]
     * @param privaterouteInterceptorService [description]
     * @param privatetemplateRef             [description]
     * @param privateviewContainer           [description]                                              [description]
     */
    constructor(httpObservableService, routeInterceptorService, templateRef, viewContainer) {
        this.httpObservableService = httpObservableService;
        this.routeInterceptorService = routeInterceptorService;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.isPendingRequests = false;
        this.isPendingRoute = false;
        this.hasView = false;
    }
    /**
     * @method ngOnChanges
     * @param changes [description]
     */
    ngOnChanges(changes) {
        if (changes.mkLoadingPage.currentValue) {
            this.mkLoadingPage = changes.mkLoadingPage.currentValue;
        }
        if (changes.mkLoadingPage.firstChange) {
            this.init();
        }
    }
    /**
     * [init description]
     * @method init
     * @return [description]
     */
    init() {
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingHttp) {
            this.httpObservableService.isPendingRequests.subscribe(value => {
                this.isPendingRequests = value;
                this.isVisible();
            });
        }
        if (!this.mkLoadingPage || this.mkLoadingPage.checkPendingRoute) {
            this.routeInterceptorService.isPendingRoute.subscribe(value => {
                this.isPendingRoute = value;
                this.isVisible();
            });
        }
    }
    /**
     * [isVisible description]
     * @method isVisible
     * @return [description]
     */
    isVisible() {
        if (this.hasView && !this.isPendingRequests && !this.isPendingRoute) {
            this.viewContainer.clear();
            this.hasView = false;
        }
        else if (!this.hasView && (this.isPendingRequests || this.isPendingRoute)) {
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.hasView = true;
        }
    }
}
LoadingPageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mkLoadingPage]',
            },] }
];
LoadingPageDirective.ctorParameters = () => [
    { type: HttpObservableService },
    { type: RouteInterceptorService },
    { type: TemplateRef },
    { type: ViewContainerRef }
];
LoadingPageDirective.propDecorators = {
    mkLoadingPage: [{ type: Input }]
};

const HttpInterceptorServiceExistingProvider = {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpInterceptorService,
    multi: true
};
const ɵ0 = HttpInterceptorServiceFactory;
class LoadingPageModule {
}
LoadingPageModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [
                    LoadingPageDirective
                ],
                exports: [
                    HttpClientModule,
                    LoadingPageDirective
                ],
                providers: [
                    RouteInterceptorService,
                    HttpObservableService,
                    HttpInterceptorServiceExistingProvider,
                    {
                        provide: HttpInterceptorService,
                        useFactory: ɵ0,
                        deps: [Injector]
                    }
                ]
            },] }
];

class ChasingDotsComponent {
    constructor() {
        this.colorOne = '#da4733';
        this.colorTwo = '#3b78e7';
    }
}
ChasingDotsComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-chasing-dots',
                template: `
    <div class="sk-chasing-dots">
      <div class="sk-child sk-dot1" [style.background-color]="colorOne"></div>
      <div class="sk-child sk-dot2" [style.background-color]="colorTwo"></div>
    </div>`,
                styles: [".sk-chasing-dots{animation:sk-chasingDotsRotate 2s linear infinite;height:40px;margin:40px auto;position:relative;text-align:center;width:40px}.sk-chasing-dots .sk-child{animation:sk-chasingDotsBounce 2s ease-in-out infinite;border-radius:100%;display:inline-block;height:60%;position:absolute;top:0;width:60%}.sk-chasing-dots .sk-dot2{animation-delay:-1s;bottom:0;top:auto}@keyframes sk-chasingDotsRotate{to{transform:rotate(1turn)}}@keyframes sk-chasingDotsBounce{0%,to{transform:scale(0)}50%{transform:scale(1)}}"]
            },] }
];
ChasingDotsComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }]
};

class ChasingDotsModule {
}
ChasingDotsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ChasingDotsComponent,
                ],
                exports: [
                    ChasingDotsComponent
                ]
            },] }
];

class CircleComponent {
    constructor() {
        this.color = '#da4733';
    }
}
CircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-circle',
                template: `
    <div class="sk-circle">
      <div class="sk-circle1 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle2 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle3 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle4 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle5 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle6 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle7 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle8 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle9 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle10 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle11 sk-child"><div [style.background-color]="color"></div></div>
      <div class="sk-circle12 sk-child"><div [style.background-color]="color"></div></div>
    </div>`,
                styles: [".sk-circle{height:40px;margin:40px auto;position:relative;width:40px}.sk-circle .sk-child{height:100%;left:0;position:absolute;top:0;width:100%}.sk-circle .sk-child>div{animation:sk-circleBounceDelay 1.2s ease-in-out infinite both;border-radius:100%;display:block;height:15%;margin:0 auto;width:15%}.sk-circle .sk-circle2{transform:rotate(30deg)}.sk-circle .sk-circle3{transform:rotate(60deg)}.sk-circle .sk-circle4{transform:rotate(90deg)}.sk-circle .sk-circle5{transform:rotate(120deg)}.sk-circle .sk-circle6{transform:rotate(150deg)}.sk-circle .sk-circle7{transform:rotate(180deg)}.sk-circle .sk-circle8{transform:rotate(210deg)}.sk-circle .sk-circle9{transform:rotate(240deg)}.sk-circle .sk-circle10{transform:rotate(270deg)}.sk-circle .sk-circle11{transform:rotate(300deg)}.sk-circle .sk-circle12{transform:rotate(330deg)}.sk-circle .sk-circle2>div{animation-delay:-1.1s}.sk-circle .sk-circle3>div{animation-delay:-1s}.sk-circle .sk-circle4>div{animation-delay:-.9s}.sk-circle .sk-circle5>div{animation-delay:-.8s}.sk-circle .sk-circle6>div{animation-delay:-.7s}.sk-circle .sk-circle7>div{animation-delay:-.6s}.sk-circle .sk-circle8>div{animation-delay:-.5s}.sk-circle .sk-circle9>div{animation-delay:-.4s}.sk-circle .sk-circle10>div{animation-delay:-.3s}.sk-circle .sk-circle11>div{animation-delay:-.2s}.sk-circle .sk-circle12>div{animation-delay:-.1s}@keyframes sk-circleBounceDelay{0%,80%,to{transform:scale(0)}40%{transform:scale(1)}}"]
            },] }
];
CircleComponent.propDecorators = {
    color: [{ type: Input }]
};

class CircleModule {
}
CircleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    CircleComponent,
                ],
                exports: [
                    CircleComponent
                ]
            },] }
];

class CubeGridComponent {
    constructor() {
        this.color = '#da4733';
    }
}
CubeGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-cube-grid',
                template: `
    <div class="sk-cube-grid">
      <div class="sk-cube sk-cube1" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube2" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube3" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube4" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube5" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube6" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube7" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube8" [style.background-color]="color"></div>
      <div class="sk-cube sk-cube9" [style.background-color]="color"></div>
    </div>`,
                styles: [".sk-cube-grid{height:40px;margin:40px auto;width:40px}.sk-cube-grid .sk-cube{animation:sk-cubeGridScaleDelay 1.3s ease-in-out infinite;float:left;height:33.33%;width:33.33%}.sk-cube-grid .sk-cube1{animation-delay:.2s}.sk-cube-grid .sk-cube2{animation-delay:.3s}.sk-cube-grid .sk-cube3{animation-delay:.4s}.sk-cube-grid .sk-cube4{animation-delay:.1s}.sk-cube-grid .sk-cube5{animation-delay:.2s}.sk-cube-grid .sk-cube6{animation-delay:.3s}.sk-cube-grid .sk-cube7{animation-delay:0s}.sk-cube-grid .sk-cube8{animation-delay:.1s}.sk-cube-grid .sk-cube9{animation-delay:.2s}@keyframes sk-cubeGridScaleDelay{0%,70%,to{transform:scaleX(1)}35%{transform:scale3D(0,0,1)}}"]
            },] }
];
CubeGridComponent.propDecorators = {
    color: [{ type: Input }]
};

class CubeGridModule {
}
CubeGridModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    CubeGridComponent,
                ],
                exports: [
                    CubeGridComponent
                ]
            },] }
];

class DoubleBounceComponent {
    constructor() {
        this.colorOne = '#da4733';
        this.colorTwo = '#3b78e7';
    }
}
DoubleBounceComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-double-bounce',
                template: `
    <div class="sk-double-bounce">
      <div class="sk-child sk-double-bounce1" [style.background-color]="colorOne"></div>
      <div class="sk-child sk-double-bounce2" [style.background-color]="colorTwo"></div>
    </div>`,
                styles: [".sk-double-bounce{height:40px;margin:40px auto;position:relative;width:40px}.sk-double-bounce .sk-child{animation:sk-doubleBounce 2s ease-in-out infinite;border-radius:50%;height:100%;left:0;opacity:.6;position:absolute;top:0;width:100%}.sk-double-bounce .sk-double-bounce2{animation-delay:-1s}@keyframes sk-doubleBounce{0%,to{transform:scale(0)}50%{transform:scale(1)}}"]
            },] }
];
DoubleBounceComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }]
};

class DoubleBounceModule {
}
DoubleBounceModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    DoubleBounceComponent,
                ],
                exports: [
                    DoubleBounceComponent
                ]
            },] }
];

class FadingCircleComponent {
    constructor() {
        this.color = '#da4733';
    }
}
FadingCircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-fading-circle',
                template: `
    <div class="sk-fading-circle">
      <div class="sk-circle1 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle2 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle3 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle4 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle5 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle6 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle7 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle8 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle9 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle10 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle11 sk-circle"><div [style.background-color]="color"></div></div>
      <div class="sk-circle12 sk-circle"><div [style.background-color]="color"></div></div>
    </div>`,
                styles: [".sk-fading-circle{height:40px;margin:40px auto;position:relative;width:40px}.sk-fading-circle .sk-circle{height:100%;left:0;position:absolute;top:0;width:100%}.sk-fading-circle .sk-circle>div{animation:sk-circleFadeDelay 1.2s ease-in-out infinite both;border-radius:100%;content:\"\";display:block;height:15%;margin:0 auto;width:15%}.sk-fading-circle .sk-circle2{transform:rotate(30deg)}.sk-fading-circle .sk-circle3{transform:rotate(60deg)}.sk-fading-circle .sk-circle4{transform:rotate(90deg)}.sk-fading-circle .sk-circle5{transform:rotate(120deg)}.sk-fading-circle .sk-circle6{transform:rotate(150deg)}.sk-fading-circle .sk-circle7{transform:rotate(180deg)}.sk-fading-circle .sk-circle8{transform:rotate(210deg)}.sk-fading-circle .sk-circle9{transform:rotate(240deg)}.sk-fading-circle .sk-circle10{transform:rotate(270deg)}.sk-fading-circle .sk-circle11{transform:rotate(300deg)}.sk-fading-circle .sk-circle12{transform:rotate(330deg)}.sk-fading-circle .sk-circle2>div{animation-delay:-1.1s}.sk-fading-circle .sk-circle3>div{animation-delay:-1s}.sk-fading-circle .sk-circle4>div{animation-delay:-.9s}.sk-fading-circle .sk-circle5>div{animation-delay:-.8s}.sk-fading-circle .sk-circle6>div{animation-delay:-.7s}.sk-fading-circle .sk-circle7>div{animation-delay:-.6s}.sk-fading-circle .sk-circle8>div{animation-delay:-.5s}.sk-fading-circle .sk-circle9>div{animation-delay:-.4s}.sk-fading-circle .sk-circle10>div{animation-delay:-.3s}.sk-fading-circle .sk-circle11>div{animation-delay:-.2s}.sk-fading-circle .sk-circle12>div{animation-delay:-.1s}@keyframes sk-circleFadeDelay{0%,39%,to{opacity:0}40%{opacity:1}}"]
            },] }
];
FadingCircleComponent.propDecorators = {
    color: [{ type: Input }]
};

class FadingCircleModule {
}
FadingCircleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    FadingCircleComponent,
                ],
                exports: [
                    FadingCircleComponent
                ]
            },] }
];

class FoldingCubeComponent {
    constructor() {
        this.color = '#da4733';
    }
}
FoldingCubeComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-folding-cube',
                template: `
    <div class="sk-folding-cube">
      <div class="sk-cube1 sk-cube"><div [style.background-color]="color"></div></div>
      <div class="sk-cube2 sk-cube"><div [style.background-color]="color"></div></div>
      <div class="sk-cube4 sk-cube"><div [style.background-color]="color"></div></div>
      <div class="sk-cube3 sk-cube"><div [style.background-color]="color"></div></div>
    </div>`,
                styles: [".sk-folding-cube{height:40px;margin:40px auto;position:relative;transform:rotate(45deg);width:40px}.sk-folding-cube .sk-cube{float:left;height:50%;position:relative;transform:scale(1.1);width:50%}.sk-folding-cube .sk-cube>div{animation:sk-foldCubeAngle 2.4s linear infinite both;content:\"\";height:100%;left:0;position:absolute;top:0;transform-origin:100% 100%;width:100%}.sk-folding-cube .sk-cube2{transform:scale(1.1) rotate(90deg)}.sk-folding-cube .sk-cube3{transform:scale(1.1) rotate(180deg)}.sk-folding-cube .sk-cube4{transform:scale(1.1) rotate(270deg)}.sk-folding-cube .sk-cube2>div{animation-delay:.3s}.sk-folding-cube .sk-cube3>div{animation-delay:.6s}.sk-folding-cube .sk-cube4>div{animation-delay:.9s}@keyframes sk-foldCubeAngle{0%,10%{opacity:0;transform:perspective(140px) rotateX(-180deg)}25%,75%{opacity:1;transform:perspective(140px) rotateX(0deg)}90%,to{opacity:0;transform:perspective(140px) rotateY(180deg)}}"]
            },] }
];
FoldingCubeComponent.propDecorators = {
    color: [{ type: Input }]
};

class FoldingCubeModule {
}
FoldingCubeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    FoldingCubeComponent,
                ],
                exports: [
                    FoldingCubeComponent
                ]
            },] }
];

class MaterialbarComponent {
    constructor() {
        this.colorOne = '#da4733';
        this.colorTwo = '#3b78e7';
        this.colorThree = '#fdba2c';
    }
}
MaterialbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-material-bar',
                template: `
  <div class="material-bar">
    <div class="bar" [style.background-color]="colorOne"></div>
    <div class="bar" [style.background-color]="colorTwo"></div>
    <div class="bar" [style.background-color]="colorThree"></div>
  </div>`,
                styles: [".material-bar{background-color:#fdba2c;height:4px;position:relative;width:100%}.bar{content:\"\";display:inline;height:100%;left:50%;position:absolute;text-align:center;width:0}.bar:first-child{animation:loading 3s linear infinite}.bar:nth-child(2){animation:loading 3s linear 1s infinite}.bar:nth-child(3){animation:loading 3s linear 2s infinite}@keyframes loading{0%{left:50%;width:0;z-index:100}33.3333%{left:0;width:100%;z-index:10}to{left:0;width:100%}}"]
            },] }
];
MaterialbarComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }],
    colorThree: [{ type: Input }]
};

class MaterialBarModule {
}
MaterialBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    MaterialbarComponent,
                ],
                exports: [
                    MaterialbarComponent
                ]
            },] }
];

class PulseComponent {
    constructor() {
        this.color = '#da4733';
    }
}
PulseComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-pulse',
                template: `<div class="sk-spinner sk-spinner-pulse" [style.background-color]="color"></div>`,
                styles: [".sk-spinner-pulse{animation:sk-pulseScaleOut 1s ease-in-out infinite;background-color:#333;border-radius:100%;height:40px;margin:40px auto;width:40px}@keyframes sk-pulseScaleOut{0%{transform:scale(0)}to{opacity:0;transform:scale(1)}}"]
            },] }
];
PulseComponent.propDecorators = {
    color: [{ type: Input }]
};

class PulseModule {
}
PulseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    PulseComponent,
                ],
                exports: [
                    PulseComponent
                ]
            },] }
];

class SlidingBarComponent {
    constructor() {
        this.colorOne = '#ddd';
        this.colorTwo = '#3c8dbc';
    }
}
SlidingBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-sliding-bar',
                template: `<div class="sliding-bar" [style.background-color]="colorOne"><div [style.background-color]="colorTwo"></div></div>`,
                styles: [".sliding-bar{height:4px;overflow:hidden;position:relative;width:100%}.sliding-bar>div{animation:loading 2s linear infinite;background-color:#2980b9;content:\"\";display:block;height:4px;left:-200px;position:absolute;width:200px}@keyframes loading{0%{left:-200px;width:30%}50%{width:30%}70%{width:70%}80%{left:50%}95%{left:120%}to{left:100%}}"]
            },] }
];
SlidingBarComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }]
};

class SlidingBarModule {
}
SlidingBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    SlidingBarComponent,
                ],
                exports: [
                    SlidingBarComponent
                ]
            },] }
];

class ThreeBounceComponent {
    constructor() {
        this.colorOne = '#00a65a';
        this.colorTwo = '#fdba2c';
        this.colorThree = '#da4733';
    }
}
ThreeBounceComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-three-bounce',
                template: `
    <div class="sk-three-bounce">
       <div class="sk-child sk-bounce1" [style.background-color]="colorOne"></div>
       <div class="sk-child sk-bounce2" [style.background-color]="colorTwo"></div>
       <div class="sk-child sk-bounce3" [style.background-color]="colorThree"></div>
     </div>`,
                styles: [".sk-three-bounce{margin:40px auto;text-align:center;width:80px}.sk-three-bounce .sk-child{animation:sk-three-bounce 1.4s ease-in-out 0s infinite both;background-color:#333;border-radius:100%;display:inline-block;height:20px;width:20px}.sk-three-bounce .sk-bounce1{animation-delay:-.32s}.sk-three-bounce .sk-bounce2{animation-delay:-.16s}@keyframes sk-three-bounce{0%,80%,to{transform:scale(0)}40%{transform:scale(1)}}"]
            },] }
];
ThreeBounceComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }],
    colorThree: [{ type: Input }]
};

class ThreeBounceModule {
}
ThreeBounceModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ThreeBounceComponent,
                ],
                exports: [
                    ThreeBounceComponent
                ]
            },] }
];

class WanderingCubesComponent {
    constructor() {
        this.colorOne = '#da4733';
        this.colorTwo = '#3b78e7';
    }
}
WanderingCubesComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-wandering-cubes',
                template: `
    <div class="sk-wandering-cubes">
      <div class="sk-cube sk-cube1" [style.background-color]="colorOne"></div>
      <div class="sk-cube sk-cube2" [style.background-color]="colorTwo"></div>
    </div>`,
                styles: [".sk-wandering-cubes{height:40px;margin:40px auto;position:relative;width:40px}.sk-wandering-cubes .sk-cube{animation:sk-wanderingCube 1.8s ease-in-out -1.8s infinite both;height:10px;left:0;position:absolute;top:0;width:10px}.sk-wandering-cubes .sk-cube2{animation-delay:-.9s}@keyframes sk-wanderingCube{0%{transform:rotate(0deg)}25%{transform:translateX(30px) rotate(-90deg) scale(.5)}50%{transform:translateX(30px) translateY(30px) rotate(-179deg)}50.1%{transform:translateX(30px) translateY(30px) rotate(-180deg)}75%{transform:translateX(0) translateY(30px) rotate(-270deg) scale(.5)}to{transform:rotate(-1turn)}}"]
            },] }
];
WanderingCubesComponent.propDecorators = {
    colorOne: [{ type: Input }],
    colorTwo: [{ type: Input }]
};

class WanderingCubesModule {
}
WanderingCubesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    WanderingCubesComponent,
                ],
                exports: [
                    WanderingCubesComponent
                ]
            },] }
];

class WaveComponent {
    constructor() {
        this.color = '#da4733';
    }
}
WaveComponent.decorators = [
    { type: Component, args: [{
                selector: 'mk-wave',
                template: `
    <div class="sk-wave">
      <div class="sk-rect sk-rect1" [style.background-color]="color"></div>
      <div class="sk-rect sk-rect2" [style.background-color]="color"></div>
      <div class="sk-rect sk-rect3" [style.background-color]="color"></div>
      <div class="sk-rect sk-rect4" [style.background-color]="color"></div>
      <div class="sk-rect sk-rect5" [style.background-color]="color"></div>
    </div>`,
                styles: [".sk-wave{font-size:10px;height:40px;margin:40px auto;text-align:center;width:50px}.sk-wave .sk-rect{animation:sk-waveStretchDelay 1.2s ease-in-out infinite;display:inline-block;height:100%;width:6px}.sk-wave .sk-rect1{animation-delay:-1.2s}.sk-wave .sk-rect2{animation-delay:-1.1s}.sk-wave .sk-rect3{animation-delay:-1s}.sk-wave .sk-rect4{animation-delay:-.9s}.sk-wave .sk-rect5{animation-delay:-.8s}@keyframes sk-waveStretchDelay{0%,40%,to{transform:scaleY(.4)}20%{transform:scaleY(1)}}"]
            },] }
];
WaveComponent.propDecorators = {
    color: [{ type: Input }]
};

class WaveModule {
}
WaveModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    WaveComponent,
                ],
                exports: [
                    WaveComponent
                ]
            },] }
];

/*
 * Public API Surface of angular-loading-page
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ChasingDotsComponent, ChasingDotsModule, CircleComponent, CircleModule, CubeGridComponent, CubeGridModule, DoubleBounceComponent, DoubleBounceModule, FadingCircleComponent, FadingCircleModule, FoldingCubeComponent, FoldingCubeModule, HttpInterceptorService, HttpInterceptorServiceFactory, HttpObservableService, LoadingPageDirective, LoadingPageModule, MaterialBarModule, MaterialbarComponent, PulseComponent, PulseModule, RouteInterceptorService, SlidingBarComponent, SlidingBarModule, ThreeBounceComponent, ThreeBounceModule, WanderingCubesComponent, WanderingCubesModule, WaveComponent, WaveModule, ɵ0 };
//# sourceMappingURL=angular-loading-page.js.map
