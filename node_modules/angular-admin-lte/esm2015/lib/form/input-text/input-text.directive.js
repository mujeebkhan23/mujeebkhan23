import { Directive, Input, Renderer2, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { ColorService } from '../../color/color.service';
import { ClassService } from '../../services/class.service';
// @TODO onFocus Color
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '../../color/color.service';
import * as ɵngcc3 from '../../services/class.service';
export class InputTextDirective {
    constructor(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this.isSetClass = false;
        this.onKeyUp = new Subject();
        this.onKeyup = this.onKeyUp.asObservable();
    }
    set borderColor(color) {
        this.colorService.setBackgroundColor(color, true, 'border-color', '');
    }
    set class(className) {
        this.isSetClass = true;
        this.classService.applyClasses(className);
    }
    set color(color) {
        this.colorService.setFontColor(color);
    }
    keyUpListener() {
        this.onKeyUp.next(this.ngControl);
    }
    ngOnInit() {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    }
}
InputTextDirective.ɵfac = function InputTextDirective_Factory(t) { return new (t || InputTextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ColorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClassService)); };
InputTextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputTextDirective, selectors: [["", "mkInputText", ""]], hostBindings: function InputTextDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function InputTextDirective_keyup_HostBindingHandler() { return ctx.keyUpListener(); });
    } }, inputs: { borderColor: "borderColor", class: "class", color: "color" }, features: [ɵngcc0.ɵɵProvidersFeature([ColorService, ClassService])] });
InputTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgControl },
    { type: ColorService },
    { type: ClassService }
];
InputTextDirective.propDecorators = {
    borderColor: [{ type: Input }],
    class: [{ type: Input }],
    color: [{ type: Input }],
    keyUpListener: [{ type: HostListener, args: ['keyup',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputTextDirective, [{
        type: Directive,
        args: [{
                selector: '[mkInputText]',
                providers: [ColorService, ClassService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.NgControl }, { type: ɵngcc2.ColorService }, { type: ɵngcc3.ClassService }]; }, { borderColor: [{
            type: Input
        }], class: [{
            type: Input
        }], color: [{
            type: Input
        }], keyUpListener: [{
            type: HostListener,
            args: ['keyup']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnJhcnkvYW5ndWxhci1hZG1pbi1sdGUvc3JjL2xpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU1RCxzQkFBc0I7Ozs7O0FBTXRCLE1BQU0sT0FBTyxrQkFBa0I7QUFBRyxJQXNCaEMsWUFDUyxVQUFzQixFQUN0QixTQUFvQixFQUNuQixTQUFvQixFQUNwQixZQUEwQixFQUMxQixZQUEwQjtBQUNuQyxRQUxRLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUN2QixjQUFTLEdBQVQsU0FBUyxDQUFXO0FBQUMsUUFDcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLFFBQ3JCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFDM0IsaUJBQVksR0FBWixZQUFZLENBQWM7QUFDdEMsUUFoQlUsaUJBQVksR0FBRyxjQUFjLENBQUM7QUFDeEMsUUFBVSxlQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzdCLFFBQVUsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFhLENBQUM7QUFDN0MsUUFDUyxZQUFPLEdBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdEUsSUFXSyxDQUFDO0FBQ04sSUE1QkUsSUFBYSxXQUFXLENBQUMsS0FBYTtBQUN4QyxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDMUUsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFhLEtBQUssQ0FBQyxTQUFpQjtBQUN0QyxRQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzNCLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUMsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFhLEtBQUssQ0FBQyxLQUFhO0FBQ2xDLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBQ0gsSUFPeUIsYUFBYTtBQUFLLFFBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxJQUFFLENBQUM7QUFDSCxJQVNFLFFBQVE7QUFBSyxRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQzFCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDs4Q0F2Q0MsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxlQUFlLGtCQUN6QixTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLGNBQ3hDOzs7d0pBQ0k7QUFBQztBQUE0QyxZQWRaLFVBQVU7QUFBSSxZQUF6QixTQUFTO0FBQUksWUFDL0IsU0FBUztBQUFJLFlBSWIsWUFBWTtBQUFJLFlBQ2hCLFlBQVk7QUFBRztBQUFHO0FBRXhCLDBCQU9BLEtBQUs7QUFBSyxvQkFHVixLQUFLO0FBQUssb0JBSVYsS0FBSztBQUFLLDRCQVVWLFlBQVksU0FBQyxPQUFPO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25Jbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDb2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb2xvci9jb2xvci5zZXJ2aWNlJztcbmltcG9ydCB7IENsYXNzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UnO1xuXG4vLyBAVE9ETyBvbkZvY3VzIENvbG9yXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0lucHV0VGV4dF0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2UsIENsYXNzU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgc2V0IGJvcmRlckNvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yU2VydmljZS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3IsIHRydWUsICdib3JkZXItY29sb3InLCAnJyk7XG4gIH1cbiAgQElucHV0KCkgc2V0IGNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pc1NldENsYXNzID0gdHJ1ZTtcbiAgICB0aGlzLmNsYXNzU2VydmljZS5hcHBseUNsYXNzZXMoY2xhc3NOYW1lKTtcbiAgfVxuICBASW5wdXQoKSBzZXQgY29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEZvbnRDb2xvcihjb2xvcik7XG4gIH1cblxuICBwcml2YXRlIGRlZmF1bHRDbGFzcyA9ICdmb3JtLWNvbnRyb2wnO1xuICBwcml2YXRlIGlzU2V0Q2xhc3MgPSBmYWxzZTtcbiAgcHJpdmF0ZSBvbktleVVwID0gbmV3IFN1YmplY3Q8TmdDb250cm9sPigpO1xuXG4gIHB1YmxpYyBvbktleXVwOiBPYnNlcnZhYmxlPE5nQ29udHJvbD4gPSB0aGlzLm9uS2V5VXAuYXNPYnNlcnZhYmxlKCk7XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAnKSBrZXlVcExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHRoaXMub25LZXlVcC5uZXh0KHRoaXMubmdDb250cm9sKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHB1YmxpYyByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5nQ29udHJvbDogTmdDb250cm9sLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjbGFzc1NlcnZpY2U6IENsYXNzU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzU2V0Q2xhc3MpIHtcbiAgICAgIHRoaXMuY2xhc3NTZXJ2aWNlLmFwcGx5Q2xhc3Nlcyh0aGlzLmRlZmF1bHRDbGFzcyk7XG4gICAgfVxuICB9XG59XG4iXX0=