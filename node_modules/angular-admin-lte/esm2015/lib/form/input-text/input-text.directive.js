import { Directive, Input, Renderer2, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { ColorService } from '../../color/color.service';
import { ClassService } from '../../services/class.service';
// @TODO onFocus Color
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '../../color/color.service';
import * as ɵngcc3 from '../../services/class.service';
export class InputTextDirective {
    constructor(elementRef, renderer2, ngControl, colorService, classService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.ngControl = ngControl;
        this.colorService = colorService;
        this.classService = classService;
        this.defaultClass = 'form-control';
        this.isSetClass = false;
        this.onKeyUp = new Subject();
        this.onKeyup = this.onKeyUp.asObservable();
    }
    set borderColor(color) {
        this.colorService.setBackgroundColor(color, true, 'border-color', '');
    }
    set class(className) {
        this.isSetClass = true;
        this.classService.applyClasses(className);
    }
    set color(color) {
        this.colorService.setFontColor(color);
    }
    keyUpListener() {
        this.onKeyUp.next(this.ngControl);
    }
    ngOnInit() {
        if (!this.isSetClass) {
            this.classService.applyClasses(this.defaultClass);
        }
    }
}
InputTextDirective.ɵfac = function InputTextDirective_Factory(t) { return new (t || InputTextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ColorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClassService)); };
InputTextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InputTextDirective, selectors: [["", "mkInputText", ""]], hostBindings: function InputTextDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup", function InputTextDirective_keyup_HostBindingHandler() { return ctx.keyUpListener(); });
    } }, inputs: { borderColor: "borderColor", class: "class", color: "color" }, features: [ɵngcc0.ɵɵProvidersFeature([ColorService, ClassService])] });
InputTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgControl },
    { type: ColorService },
    { type: ClassService }
];
InputTextDirective.propDecorators = {
    borderColor: [{ type: Input }],
    class: [{ type: Input }],
    color: [{ type: Input }],
    keyUpListener: [{ type: HostListener, args: ['keyup',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InputTextDirective, [{
        type: Directive,
        args: [{
                selector: '[mkInputText]',
                providers: [ColorService, ClassService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.NgControl }, { type: ɵngcc2.ColorService }, { type: ɵngcc3.ClassService }]; }, { borderColor: [{
            type: Input
        }], class: [{
            type: Input
        }], color: [{
            type: Input
        }], keyUpListener: [{
            type: HostListener,
            args: ['keyup']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnJhcnkvYW5ndWxhci1hZG1pbi1sdGUvc3JjL2xpYi9mb3JtL2lucHV0LXRleHQvaW5wdXQtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU1RCxzQkFBc0I7Ozs7O0FBTXRCLE1BQU0sT0FBTyxrQkFBa0I7QUFBSSxJQXNCakMsWUFDUyxVQUFzQixFQUN0QixTQUFvQixFQUNuQixTQUFvQixFQUNwQixZQUEwQixFQUMxQixZQUEwQjtBQUNsQyxRQUxPLGVBQVUsR0FBVixVQUFVLENBQVk7QUFDakMsUUFBVyxjQUFTLEdBQVQsU0FBUyxDQUFXO0FBQy9CLFFBQVksY0FBUyxHQUFULFNBQVMsQ0FBVztBQUNoQyxRQUFZLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQ3RDLFFBQVksaUJBQVksR0FBWixZQUFZLENBQWM7QUFDckMsUUFoQlMsaUJBQVksR0FBRyxjQUFjLENBQUM7QUFDdkMsUUFBUyxlQUFVLEdBQUcsS0FBSyxDQUFDO0FBQzVCLFFBQVMsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFhLENBQUM7QUFFN0MsUUFBUyxZQUFPLEdBQTBCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7QUFFdEUsSUFVSyxDQUFDO0FBRU4sSUE3QkUsSUFBYSxXQUFXLENBQUMsS0FBYTtBQUN2QyxRQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekUsSUFBQyxDQUFDO0FBQ0YsSUFBQyxJQUFhLEtBQUssQ0FBQyxTQUFpQjtBQUNyQyxRQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzFCLFFBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsSUFBQyxDQUFDO0FBQ0YsSUFBQyxJQUFhLEtBQUssQ0FBQyxLQUFhO0FBQ2pDLFFBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekMsSUFBQyxDQUFDO0FBRUgsSUFNeUIsYUFBYTtBQUFNLFFBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyQyxJQUFDLENBQUM7QUFFSCxJQVFFLFFBQVE7QUFBTSxRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ3pCLFlBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELFNBQUk7QUFDSixJQUFDLENBQUM7QUFDRjtnREF2Q0EsU0FBUyxTQUFDLG1CQUNULFFBQVEsRUFBRSxlQUFlLG1CQUN6QixTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLGVBQ3hDOzs7d0pBQ0s7QUFBRTtBQUNQLFlBZnFDLFVBQVU7QUFBSyxZQUExQixTQUFTO0FBQUssWUFDaEMsU0FBUztBQUFLLFlBSWQsWUFBWTtBQUFLLFlBQ2pCLFlBQVk7QUFBSTtBQUFJO0FBRXZCLDBCQU9ILEtBQUs7QUFBTSxvQkFHWCxLQUFLO0FBQU0sb0JBSVgsS0FBSztBQUFNLDRCQVVYLFlBQVksU0FBQyxPQUFPO0FBQU87Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaENBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQXNCQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFmQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBM0JBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFVQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUF0Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFiQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFJQSxBQUFBLEFBQ0EsQUFBQSxBQVNBLEFBQUEsQUFHQSxBQUFBLEFBSUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbG9yL2NvbG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2xhc3Muc2VydmljZSc7XG5cbi8vIEBUT0RPIG9uRm9jdXMgQ29sb3JcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rSW5wdXRUZXh0XScsXG4gIHByb3ZpZGVyczogW0NvbG9yU2VydmljZSwgQ2xhc3NTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFRleHREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBzZXQgYm9yZGVyQ29sb3IoY29sb3I6IHN0cmluZykge1xuICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcihjb2xvciwgdHJ1ZSwgJ2JvcmRlci1jb2xvcicsICcnKTtcbiAgfVxuICBASW5wdXQoKSBzZXQgY2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlzU2V0Q2xhc3MgPSB0cnVlO1xuICAgIHRoaXMuY2xhc3NTZXJ2aWNlLmFwcGx5Q2xhc3NlcyhjbGFzc05hbWUpO1xuICB9XG4gIEBJbnB1dCgpIHNldCBjb2xvcihjb2xvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0Rm9udENvbG9yKGNvbG9yKTtcbiAgfVxuXG4gIHByaXZhdGUgZGVmYXVsdENsYXNzID0gJ2Zvcm0tY29udHJvbCc7XG4gIHByaXZhdGUgaXNTZXRDbGFzcyA9IGZhbHNlO1xuICBwcml2YXRlIG9uS2V5VXAgPSBuZXcgU3ViamVjdDxOZ0NvbnRyb2w+KCk7XG5cbiAgcHVibGljIG9uS2V5dXA6IE9ic2VydmFibGU8TmdDb250cm9sPiA9IHRoaXMub25LZXlVcC5hc09ic2VydmFibGUoKTtcblxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcpIGtleVVwTGlzdGVuZXIoKTogdm9pZCB7XG4gICAgdGhpcy5vbktleVVwLm5leHQodGhpcy5uZ0NvbnRyb2wpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHVibGljIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgbmdDb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgcHJpdmF0ZSBjb2xvclNlcnZpY2U6IENvbG9yU2VydmljZSxcbiAgICBwcml2YXRlIGNsYXNzU2VydmljZTogQ2xhc3NTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNTZXRDbGFzcykge1xuICAgICAgdGhpcy5jbGFzc1NlcnZpY2UuYXBwbHlDbGFzc2VzKHRoaXMuZGVmYXVsdENsYXNzKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==