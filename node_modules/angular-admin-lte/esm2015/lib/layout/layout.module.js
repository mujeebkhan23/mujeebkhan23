import { NgModule, Optional, SkipSelf } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ContentModule } from './content/content.module';
import { FooterModule } from './footer/footer.module';
import { HeaderModule } from './header/header.module';
import { SidebarLeftModule } from './sidebar-left/sidebar-left.module';
import { SidebarRightModule } from './sidebar-right/sidebar-right.module';
import { WrapperModule } from './wrapper/wrapper.module';
import { LayoutService } from './layout.service';
import { layoutProvider } from './layout.provider';
import { RoutingService } from '../services/routing.service';
import { WrapperService } from './wrapper/wrapper.service';
import { SidebarRightService } from './sidebar-right/sidebar-right.service';
import { HeaderService } from './header/header.service';
import { FooterService } from './footer/footer.service';
import * as ɵngcc0 from '@angular/core';
export * from './layout.service';
export * from './layout.store';
export * from './layout.state';
export class LayoutModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('LayoutModule is already loaded. Import it in the AppModule only!');
        }
    }
    static forRoot(layoutConfig) {
        return {
            ngModule: LayoutModule,
            providers: [...layoutProvider(layoutConfig), LayoutService]
        };
    }
}
LayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });
LayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(ɵngcc0.ɵɵinject(LayoutModule, 12)); }, providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService], imports: [[CommonModule, RouterModule], ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule] });
LayoutModule.ctorParameters = () => [
    { type: LayoutModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LayoutModule, { imports: function () { return [CommonModule, RouterModule]; }, exports: function () { return [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule],
                exports: [ContentModule, FooterModule, HeaderModule, SidebarLeftModule, SidebarRightModule, WrapperModule],
                providers: [RoutingService, WrapperService, SidebarRightService, HeaderService, FooterService]
            }]
    }], function () { return [{ type: LayoutModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL2xheW91dC9sYXlvdXQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7O0FBRXhELGNBQWMsa0JBQWtCLENBQUM7QUFDakMsY0FBYyxnQkFBZ0IsQ0FBQztBQUMvQixjQUFjLGdCQUFnQixDQUFDO0FBUS9CLE1BQU0sT0FBTyxZQUFZO0FBQ3pCLElBQ0UsWUFBb0MsWUFBMEI7QUFDaEUsUUFBSSxJQUFJLFlBQVksRUFBRTtBQUN0QixZQUFNLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztBQUMxRixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQTZCO0FBQUksUUFDOUMsT0FBTztBQUNYLFlBQU0sUUFBUSxFQUFFLFlBQVk7QUFDNUIsWUFBTSxTQUFTLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUM7QUFDakUsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0g7d0NBbkJDLFFBQVEsU0FBQztNQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsa0JBQ3JDLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGFBQWEsQ0FBQyxrQkFDMUcsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDLGNBQy9GLHVHQUNJO0FBQUM7QUFFUyxZQUFxQyxZQUFZLHVCQUFqRCxRQUFRLFlBQUksUUFBUTtBQUFNOzs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgQ29udGVudE1vZHVsZSB9IGZyb20gJy4vY29udGVudC9jb250ZW50Lm1vZHVsZSc7XG5pbXBvcnQgeyBGb290ZXJNb2R1bGUgfSBmcm9tICcuL2Zvb3Rlci9mb290ZXIubW9kdWxlJztcbmltcG9ydCB7IEhlYWRlck1vZHVsZSB9IGZyb20gJy4vaGVhZGVyL2hlYWRlci5tb2R1bGUnO1xuaW1wb3J0IHsgU2lkZWJhckxlZnRNb2R1bGUgfSBmcm9tICcuL3NpZGViYXItbGVmdC9zaWRlYmFyLWxlZnQubW9kdWxlJztcbmltcG9ydCB7IFNpZGViYXJSaWdodE1vZHVsZSB9IGZyb20gJy4vc2lkZWJhci1yaWdodC9zaWRlYmFyLXJpZ2h0Lm1vZHVsZSc7XG5pbXBvcnQgeyBXcmFwcGVyTW9kdWxlIH0gZnJvbSAnLi93cmFwcGVyL3dyYXBwZXIubW9kdWxlJztcbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL2xheW91dC5zZXJ2aWNlJztcbmltcG9ydCB7IExheW91dFN0YXRlLCBMYXlvdXRTdGF0ZUNvbmYgfSBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG5pbXBvcnQgeyBsYXlvdXRQcm92aWRlciB9IGZyb20gJy4vbGF5b3V0LnByb3ZpZGVyJztcbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcm91dGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi93cmFwcGVyL3dyYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTaWRlYmFyUmlnaHRTZXJ2aWNlIH0gZnJvbSAnLi9zaWRlYmFyLXJpZ2h0L3NpZGViYXItcmlnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFkZXJTZXJ2aWNlIH0gZnJvbSAnLi9oZWFkZXIvaGVhZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9vdGVyU2VydmljZSB9IGZyb20gJy4vZm9vdGVyL2Zvb3Rlci5zZXJ2aWNlJztcblxuZXhwb3J0ICogZnJvbSAnLi9sYXlvdXQuc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdG9yZSc7XG5leHBvcnQgKiBmcm9tICcuL2xheW91dC5zdGF0ZSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUm91dGVyTW9kdWxlXSxcbiAgZXhwb3J0czogW0NvbnRlbnRNb2R1bGUsIEZvb3Rlck1vZHVsZSwgSGVhZGVyTW9kdWxlLCBTaWRlYmFyTGVmdE1vZHVsZSwgU2lkZWJhclJpZ2h0TW9kdWxlLCBXcmFwcGVyTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbUm91dGluZ1NlcnZpY2UsIFdyYXBwZXJTZXJ2aWNlLCBTaWRlYmFyUmlnaHRTZXJ2aWNlLCBIZWFkZXJTZXJ2aWNlLCBGb290ZXJTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBMYXlvdXRNb2R1bGUge1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogTGF5b3V0TW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMYXlvdXRNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgQXBwTW9kdWxlIG9ubHkhJyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZvclJvb3QobGF5b3V0Q29uZmlnOiBMYXlvdXRTdGF0ZUNvbmYpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPExheW91dE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTGF5b3V0TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbLi4ubGF5b3V0UHJvdmlkZXIobGF5b3V0Q29uZmlnKSwgTGF5b3V0U2VydmljZV1cbiAgICB9O1xuICB9XG59XG4iXX0=