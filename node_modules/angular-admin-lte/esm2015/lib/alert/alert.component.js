import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, NgZone, Output, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { removeListeners } from '../helpers';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '../animations/animations.directive';
import * as ɵngcc3 from '../color/color.directive';

const _c0 = ["removeButtonElement"];
function AlertComponent_div_0_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4, 5);
    ɵngcc0.ɵɵtext(2, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = function (a0, a1, a2) { return [a0, a1, a2]; };
function AlertComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵlistener("mkCollapseAnimation.start", function AlertComponent_div_0_Template_div_mkCollapseAnimation_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onCollapseStart($event); })("mkCollapseAnimation.done", function AlertComponent_div_0_Template_div_mkCollapseAnimation_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onCollapseDone($event); });
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵtemplate(2, AlertComponent_div_0_button_2_Template, 3, 0, "button", 3);
    ɵngcc0.ɵɵprojection(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mkCollapseAnimation", ctx_r0.remove);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mkColor", ctx_r0.backgroundColor)("mkColorPrefix", ctx_r0.type)("mkFontColor", ctx_r0.color)("ngClass", ɵngcc0.ɵɵpureFunction3(6, _c1, ctx_r0.styleClass, ctx_r0.dismissibleClass, ctx_r0.type));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDismissible);
} }
const _c2 = ["*"];
export class AlertComponent {
    constructor(changeDetectorRef, ngZone, renderer2, viewContainerRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.renderer2 = renderer2;
        this.viewContainerRef = viewContainerRef;
        this.backgroundColor = 'danger';
        this.styleClass = '';
        this.collapseStart = new EventEmitter();
        this.collapseDone = new EventEmitter();
        this.dismissibleClass = 'alert-dismissible';
        this.isDismissible = true;
        this.remove = false;
        this.removed = false;
        this.type = 'alert';
        this.listeners = [];
    }
    set callout(value) {
        this.type = value ? 'callout' : 'alert';
    }
    set _isDismissible(value) {
        this.isDismissible = value;
        if (value) {
            this.dismissibleClass = `${this.type}-dismissible`;
        }
        else {
            this.dismissibleClass = '';
        }
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            if (this.dismissOnTimeout) {
                setTimeout(() => {
                    if (!this.changeDetectorRef.destroyed) {
                        this.remove = true;
                        this.changeDetectorRef.detectChanges();
                    }
                }, this.dismissOnTimeout);
            }
            if (this.removeButtonElement) {
                this.listeners.push(this.renderer2.listen(this.removeButtonElement.nativeElement, 'click', () => {
                    this.remove = true;
                    this.changeDetectorRef.detectChanges();
                }));
            }
        });
    }
    ngOnDestroy() {
        removeListeners(this.listeners);
    }
    onCollapseStart(event) {
        this.collapseStart.emit(event);
    }
    onCollapseDone(event) {
        if (event.toState === '1') {
            this.listeners = removeListeners(this.listeners);
            this.removed = true;
            this.viewContainerRef.clear();
            this.changeDetectorRef.detectChanges();
        }
        this.collapseDone.emit(event);
    }
}
AlertComponent.ɵfac = function AlertComponent_Factory(t) { return new (t || AlertComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
AlertComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AlertComponent, selectors: [["mk-alert"]], viewQuery: function AlertComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeButtonElement = _t.first);
    } }, inputs: { backgroundColor: "backgroundColor", styleClass: "styleClass", callout: "callout", _isDismissible: ["isDismissible", "_isDismissible"], color: "color", dismissOnTimeout: "dismissOnTimeout" }, outputs: { collapseStart: "collapseStart", collapseDone: "collapseDone" }, ngContentSelectors: _c2, decls: 1, vars: 1, consts: [[3, "mkCollapseAnimation", "mkCollapseAnimation.start", "mkCollapseAnimation.done", 4, "ngIf"], [3, "mkCollapseAnimation", "mkCollapseAnimation.start", "mkCollapseAnimation.done"], ["mkColorProperty", "background-color", 3, "mkColor", "mkColorPrefix", "mkFontColor", "ngClass"], ["type", "button", "class", "close", 4, "ngIf"], ["type", "button", 1, "close"], ["removeButtonElement", ""]], template: function AlertComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, AlertComponent_div_0_Template, 4, 10, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.removed);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.CollapseAnimationDirective, ɵngcc3.BackgroundColorDirective, ɵngcc3.ColorDirective, ɵngcc1.NgClass], styles: [".callout-dismissable[_ngcontent-%COMP%], .callout-dismissible[_ngcontent-%COMP%]{padding-right:35px}.callout-dismissable[_ngcontent-%COMP%]   .close[_ngcontent-%COMP%], .callout-dismissible[_ngcontent-%COMP%]   .close[_ngcontent-%COMP%]{color:inherit;position:relative;right:-21px;top:-2px}.callout[_ngcontent-%COMP%]   .close[_ngcontent-%COMP%]{color:#000;filter:alpha(opacity=20);opacity:.2}.callout[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{margin-right:10px}"], changeDetection: 0 });
AlertComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ViewContainerRef }
];
AlertComponent.propDecorators = {
    backgroundColor: [{ type: Input }],
    callout: [{ type: Input }],
    color: [{ type: Input }],
    dismissOnTimeout: [{ type: Input }],
    _isDismissible: [{ type: Input, args: ['isDismissible',] }],
    styleClass: [{ type: Input }],
    collapseStart: [{ type: Output }],
    collapseDone: [{ type: Output }],
    removeButtonElement: [{ type: ViewChild, args: ['removeButtonElement',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AlertComponent, [{
        type: Component,
        args: [{
                selector: 'mk-alert',
                template: "<div *ngIf=\"!removed\" [mkCollapseAnimation]=\"remove\" (mkCollapseAnimation.start)=\"onCollapseStart($event)\" (mkCollapseAnimation.done)=\"onCollapseDone($event)\">\n  <div [mkColor]=\"backgroundColor\" mkColorProperty=\"background-color\" [mkColorPrefix]=\"type\" [mkFontColor]=\"color\" [ngClass]=\"[styleClass, dismissibleClass, type]\">\n    <button *ngIf=\"isDismissible\" type=\"button\" class=\"close\" #removeButtonElement>&times;</button>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".callout-dismissable,.callout-dismissible{padding-right:35px}.callout-dismissable .close,.callout-dismissible .close{color:inherit;position:relative;right:-21px;top:-2px}.callout .close{color:#000;filter:alpha(opacity=20);opacity:.2}.callout .icon{margin-right:10px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }]; }, { backgroundColor: [{
            type: Input
        }], styleClass: [{
            type: Input
        }], collapseStart: [{
            type: Output
        }], collapseDone: [{
            type: Output
        }], callout: [{
            type: Input
        }], _isDismissible: [{
            type: Input,
            args: ['isDismissible']
        }], color: [{
            type: Input
        }], dismissOnTimeout: [{
            type: Input
        }], removeButtonElement: [{
            type: ViewChild,
            args: ['removeButtonElement']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,