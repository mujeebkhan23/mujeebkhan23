import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AnimationsModule } from '../animations/animations.module';
import { ColorModule } from '../color/color.module';
import { AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent } from './accordion.component';
import { AccordionToggleDirective } from './accordion.directive';
import * as ɵngcc0 from '@angular/core';
export { AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent } from './accordion.component';
export { AccordionToggleDirective } from './accordion.directive';
export class AccordionModule {
}
AccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AccordionModule });
AccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AccordionModule_Factory(t) { return new (t || AccordionModule)(); }, imports: [[CommonModule, AnimationsModule, ColorModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AccordionModule, { declarations: function () { return [AccordionToggleDirective, AccordionHeaderComponent,
        AccordionContentComponent, AccordionComponent, AccordionGroupComponent]; }, imports: function () { return [CommonModule, AnimationsModule, ColorModule]; }, exports: function () { return [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [AccordionHeaderComponent, AccordionContentComponent, AccordionComponent, AccordionGroupComponent],
                declarations: [AccordionToggleDirective, AccordionHeaderComponent,
                    AccordionContentComponent, AccordionComponent, AccordionGroupComponent]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL2FjY29yZGlvbi9hY2NvcmRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6SSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFDakUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHlCQUF5QixFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekksT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFRakUsTUFBTSxPQUFPLGVBQWU7QUFDNUI7NkNBUEMsUUFBUSxTQUFDO01BQ04sT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxtQkFDdEQsT0FBTyxFQUFFLENBQUMsd0JBQXdCLEVBQUUseUJBQXlCLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLENBQUM7UUFDM0csWUFBWSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsd0JBQXdCLHVCQUNqRCx5QkFBeUIsRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsQ0FBQyxlQUMxRjs7Ozs7Ozs7Ozs7QUFmQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJy4uL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5tb2R1bGUnO1xuaW1wb3J0IHsgQ29sb3JNb2R1bGUgfSBmcm9tICcuLi9jb2xvci9jb2xvci5tb2R1bGUnO1xuaW1wb3J0IHsgQWNjb3JkaW9uSGVhZGVyQ29tcG9uZW50LCBBY2NvcmRpb25Db250ZW50Q29tcG9uZW50LCBBY2NvcmRpb25Db21wb25lbnQsIEFjY29yZGlvbkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9hY2NvcmRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IEFjY29yZGlvblRvZ2dsZURpcmVjdGl2ZSB9IGZyb20gJy4vYWNjb3JkaW9uLmRpcmVjdGl2ZSc7XG5leHBvcnQgeyBBY2NvcmRpb25IZWFkZXJDb21wb25lbnQsIEFjY29yZGlvbkNvbnRlbnRDb21wb25lbnQsIEFjY29yZGlvbkNvbXBvbmVudCwgQWNjb3JkaW9uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2FjY29yZGlvbi5jb21wb25lbnQnO1xuZXhwb3J0IHsgQWNjb3JkaW9uVG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9hY2NvcmRpb24uZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBBbmltYXRpb25zTW9kdWxlLCBDb2xvck1vZHVsZV0sXG4gICAgZXhwb3J0czogW0FjY29yZGlvbkhlYWRlckNvbXBvbmVudCwgQWNjb3JkaW9uQ29udGVudENvbXBvbmVudCwgQWNjb3JkaW9uQ29tcG9uZW50LCBBY2NvcmRpb25Hcm91cENvbXBvbmVudF0sXG4gICAgZGVjbGFyYXRpb25zOiBbQWNjb3JkaW9uVG9nZ2xlRGlyZWN0aXZlLCBBY2NvcmRpb25IZWFkZXJDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgIEFjY29yZGlvbkNvbnRlbnRDb21wb25lbnQsIEFjY29yZGlvbkNvbXBvbmVudCwgQWNjb3JkaW9uR3JvdXBDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbk1vZHVsZSB7fVxuIl19