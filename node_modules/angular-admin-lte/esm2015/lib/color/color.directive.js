import { Directive, Input, Renderer2, ElementRef } from '@angular/core';
import { ColorService } from './color.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './color.service';
export class BackgroundColorDirective {
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
        // TODO: ADD @Required decorator
        this.condition = true;
    }
    set setPrefix(prefix) {
        this.prefix = prefix;
        this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
    }
    set setColor(color) {
        if (color) {
            this.color = color;
            this.colorService.setBackgroundColor(this.color, this.condition, this.property, this.prefix);
        }
    }
}
BackgroundColorDirective.ɵfac = function BackgroundColorDirective_Factory(t) { return new (t || BackgroundColorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ColorService)); };
BackgroundColorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BackgroundColorDirective, selectors: [["", "mkColor", ""]], inputs: { condition: ["mkColorCondition", "condition"], setPrefix: ["mkColorPrefix", "setPrefix"], setColor: ["mkColor", "setColor"], property: ["mkColorProperty", "property"] }, features: [ɵngcc0.ɵɵProvidersFeature([ColorService])] });
BackgroundColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
BackgroundColorDirective.propDecorators = {
    condition: [{ type: Input, args: ['mkColorCondition',] }],
    setPrefix: [{ type: Input, args: ['mkColorPrefix',] }],
    property: [{ type: Input, args: ['mkColorProperty',] }],
    setColor: [{ type: Input, args: ['mkColor',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BackgroundColorDirective, [{
        type: Directive,
        args: [{
                selector: '[mkColor]',
                providers: [ColorService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ColorService }]; }, { condition: [{
            type: Input,
            args: ['mkColorCondition']
        }], setPrefix: [{
            type: Input,
            args: ['mkColorPrefix']
        }], setColor: [{
            type: Input,
            args: ['mkColor']
        }], property: [{
            type: Input,
            args: ['mkColorProperty']
        }] }); })();
export class ColorDirective {
    constructor(elementRef, renderer2, colorService) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.colorService = colorService;
    }
    set color(color) {
        this.colorService.setFontColor(color);
    }
}
ColorDirective.ɵfac = function ColorDirective_Factory(t) { return new (t || ColorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ColorService)); };
ColorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ColorDirective, selectors: [["", "mkFontColor", ""]], inputs: { color: ["mkFontColor", "color"] }, features: [ɵngcc0.ɵɵProvidersFeature([ColorService])] });
ColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ColorService }
];
ColorDirective.propDecorators = {
    color: [{ type: Input, args: ['mkFontColor',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorDirective, [{
        type: Directive,
        args: [{
                selector: '[mkFontColor]',
                providers: [ColorService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ColorService }]; }, { color: [{
            type: Input,
            args: ['mkFontColor']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJyYXJ5L2FuZ3VsYXItYWRtaW4tbHRlL3NyYy9saWIvY29sb3IvY29sb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFRL0MsTUFBTSxPQUFPLHdCQUF3QjtBQUNyQyxJQWlCRSxZQUNVLFVBQXNCLEVBQ3RCLFNBQW9CLEVBQ3BCLFlBQTBCO0FBQ25DLFFBSFMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUN0QyxRQXJCRSxnQ0FBZ0M7QUFDbEMsUUFBNkIsY0FBUyxHQUFHLElBQUksQ0FBQztBQUM5QyxJQW1CSyxDQUFDO0FBQ04sSUFwQkUsSUFBNEIsU0FBUyxDQUFDLE1BQWM7QUFDdEQsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN6QixRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pHLElBQUUsQ0FBQztBQUNILElBQ0UsSUFBc0IsUUFBUSxDQUFDLEtBQWtDO0FBQ25FLFFBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixZQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkcsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO29EQWxCQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFdBQVcsa0JBQ3JCLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUMxQjt5V0FDSTtBQUFDO0FBQ1UsWUFYc0IsVUFBVTtBQUFJLFlBQXpCLFNBQVM7QUFBSSxZQUUvQixZQUFZO0FBQUc7QUFBRztBQUNKLHdCQVNwQixLQUFLLFNBQUMsa0JBQWtCO0FBQU8sd0JBQy9CLEtBQUssU0FBQyxlQUFlO0FBQU8sdUJBSTVCLEtBQUssU0FBQyxpQkFBaUI7QUFBTyx1QkFDOUIsS0FBSyxTQUFDLFNBQVM7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQXNCMUIsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFJRSxZQUNVLFVBQXNCLEVBQ3RCLFNBQW9CLEVBQ3BCLFlBQTBCO0FBQ25DLFFBSFMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUN0QyxJQUFLLENBQUM7QUFDTixJQVRFLElBQTBCLEtBQUssQ0FBQyxLQUF5QjtBQUMzRCxRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUUsQ0FBQztBQUNIOzBDQVJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsZUFBZSxrQkFDekIsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQzFCO21OQUNJO0FBQUM7QUFDVSxZQXpDc0IsVUFBVTtBQUFJLFlBQXpCLFNBQVM7QUFBSSxZQUUvQixZQUFZO0FBQUc7QUFBRztBQUNkLG9CQXNDVixLQUFLLFNBQUMsYUFBYTtBQUFNOzs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi9jb2xvci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbG9ycyB9IGZyb20gJy4vY29sb3IuZGVmaW5pdGlvbic7XG5cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21rQ29sb3JdJyxcbiAgcHJvdmlkZXJzOiBbQ29sb3JTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kQ29sb3JEaXJlY3RpdmUge1xuICAvLyBUT0RPOiBBREQgQFJlcXVpcmVkIGRlY29yYXRvclxuICBASW5wdXQoJ21rQ29sb3JDb25kaXRpb24nKSBjb25kaXRpb24gPSB0cnVlO1xuICBASW5wdXQoJ21rQ29sb3JQcmVmaXgnKSBzZXQgc2V0UHJlZml4KHByZWZpeDogc3RyaW5nKSB7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0QmFja2dyb3VuZENvbG9yKHRoaXMuY29sb3IsIHRoaXMuY29uZGl0aW9uLCB0aGlzLnByb3BlcnR5LCB0aGlzLnByZWZpeCk7XG4gIH1cbiAgQElucHV0KCdta0NvbG9yUHJvcGVydHknKSBwcm9wZXJ0eSE6IHN0cmluZztcbiAgQElucHV0KCdta0NvbG9yJykgc2V0IHNldENvbG9yKGNvbG9yOiBDb2xvcnMgfCBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgIHRoaXMuY29sb3JTZXJ2aWNlLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmNvbG9yLCB0aGlzLmNvbmRpdGlvbiwgdGhpcy5wcm9wZXJ0eSwgdGhpcy5wcmVmaXgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcHJlZml4ITogc3RyaW5nO1xuICBwcml2YXRlIGNvbG9yITogQ29sb3JzIHwgc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxufVxuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tta0ZvbnRDb2xvcl0nLFxuICBwcm92aWRlcnM6IFtDb2xvclNlcnZpY2VdXG59KVxuZXhwb3J0IGNsYXNzIENvbG9yRGlyZWN0aXZlIHtcbiAgQElucHV0KCdta0ZvbnRDb2xvcicpIHNldCBjb2xvcihjb2xvcjogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5jb2xvclNlcnZpY2Uuc2V0Rm9udENvbG9yKGNvbG9yKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgY29sb3JTZXJ2aWNlOiBDb2xvclNlcnZpY2VcbiAgKSB7fVxufVxuIl19