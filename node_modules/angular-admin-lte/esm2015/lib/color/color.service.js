import { Injectable, Renderer2, ElementRef } from '@angular/core';
import { colors, colorsAliases } from './color.definition';
import * as ɵngcc0 from '@angular/core';
export class ColorService {
    constructor(renderer2, elementRef) {
        this.renderer2 = renderer2;
        this.elementRef = elementRef;
    }
    setBackgroundColor(color, condition, property, prefix) {
        if (color && condition) {
            this.resetBackgroundColor();
            if (colors.hasOwnProperty(color)) {
                const knownColor = colors[color];
                this.renderer2.addClass(this.elementRef.nativeElement, 'bg-color');
                this.currentBackgroundStyle = { property, color: knownColor };
                this.renderer2.setStyle(this.elementRef.nativeElement, property, knownColor);
            }
            else {
                this.renderer2.removeClass(this.elementRef.nativeElement, 'bg-color');
                if (color.indexOf('#') === 0 || color.indexOf('rgb') === 0) {
                    this.currentBackgroundStyle = { property, color };
                    this.renderer2.setStyle(this.elementRef.nativeElement, property, color);
                }
                else if (colorsAliases.indexOf(color) !== -1) {
                    this.currentBackgroundClass = prefix ? `${prefix}-${color}` : color;
                    this.renderer2.addClass(this.elementRef.nativeElement, this.currentBackgroundClass);
                }
            }
        }
    }
    resetBackgroundColor() {
        if (this.currentBackgroundStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, this.currentBackgroundStyle.property, this.currentBackgroundStyle.color);
        }
        else if (this.currentBackgroundClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentBackgroundClass);
        }
    }
    setFontColor(color) {
        this.resetFontColor();
        if (color) {
            if (color.startsWith('#') || color.startsWith('rgb')) {
                this.currentFontStyle = color;
                this.renderer2.setStyle(this.elementRef.nativeElement, 'color', color);
            }
            else {
                this.currentFontClass = `text-${color}`;
                this.renderer2.addClass(this.elementRef.nativeElement, this.currentFontClass);
            }
        }
    }
    resetFontColor() {
        if (this.currentFontStyle) {
            this.renderer2.removeStyle(this.elementRef.nativeElement, 'color', this.currentFontStyle);
        }
        else if (this.currentFontClass) {
            this.renderer2.removeClass(this.elementRef.nativeElement, this.currentFontClass);
        }
    }
}
ColorService.ɵfac = function ColorService_Factory(t) { return new (t || ColorService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef)); };
ColorService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ColorService, factory: ColorService.ɵfac });
ColorService.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3Iuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL2NvbG9yL2NvbG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBVSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBSW5FLE1BQU0sT0FBTyxZQUFZO0FBQ3pCLElBS0UsWUFDVSxTQUFvQixFQUNwQixVQUFzQjtBQUMvQixRQUZTLGNBQVMsR0FBVCxTQUFTLENBQVc7QUFBQyxRQUNyQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQ2xDLElBQUssQ0FBQztBQUNOLElBQ1Msa0JBQWtCLENBQUMsS0FBc0IsRUFBRSxTQUFrQixFQUFFLFFBQWdCLEVBQUUsTUFBYztBQUFJLFFBQ3hHLElBQUksS0FBSyxJQUFJLFNBQVMsRUFBRTtBQUM1QixZQUFNLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ2xDLFlBQU0sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hDLGdCQUFRLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBRSxLQUFnQixDQUFDLENBQUM7QUFDckQsZ0JBQ1EsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0UsZ0JBQVEsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsQ0FBQztBQUNwRSxnQkFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckYsYUFB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LFlBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdkYsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO3dDQS9EQyxVQUFVO29HQUNUO0FBQUM7QUFDVSxZQVBRLFNBQVM7QUFBSSxZQUFGLFVBQVU7QUFBRzs7O3VHQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29sb3JzLCBjb2xvcnMsIGNvbG9yc0FsaWFzZXMgfSBmcm9tICcuL2NvbG9yLmRlZmluaXRpb24nO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2xvclNlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnRCYWNrZ3JvdW5kU3R5bGU6IGFueTtcbiAgcHJpdmF0ZSBjdXJyZW50QmFja2dyb3VuZENsYXNzOiBhbnk7XG4gIHByaXZhdGUgY3VycmVudEZvbnRTdHlsZTogYW55O1xuICBwcml2YXRlIGN1cnJlbnRGb250Q2xhc3M6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgcHVibGljIHNldEJhY2tncm91bmRDb2xvcihjb2xvcjogQ29sb3JzIHwgc3RyaW5nLCBjb25kaXRpb246IGJvb2xlYW4sIHByb3BlcnR5OiBzdHJpbmcsIHByZWZpeDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGNvbG9yICYmIGNvbmRpdGlvbikge1xuICAgICAgdGhpcy5yZXNldEJhY2tncm91bmRDb2xvcigpO1xuICAgICAgaWYgKGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShjb2xvcikpIHtcbiAgICAgICAgY29uc3Qga25vd25Db2xvciA9IGNvbG9yc1soY29sb3IgYXMgQ29sb3JzKV07XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdiZy1jb2xvcicpO1xuICAgICAgICB0aGlzLmN1cnJlbnRCYWNrZ3JvdW5kU3R5bGUgPSB7cHJvcGVydHksIGNvbG9yOiBrbm93bkNvbG9yfTtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHByb3BlcnR5LCBrbm93bkNvbG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnYmctY29sb3InKTtcbiAgICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCB8fCBjb2xvci5pbmRleE9mKCdyZ2InKSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudEJhY2tncm91bmRTdHlsZSA9IHtwcm9wZXJ0eSwgY29sb3J9O1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBwcm9wZXJ0eSwgY29sb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9yc0FsaWFzZXMuaW5kZXhPZihjb2xvcikgIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzID0gcHJlZml4ID8gYCR7cHJlZml4fS0ke2NvbG9yfWAgOiBjb2xvcjtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNldEJhY2tncm91bmRDb2xvcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jdXJyZW50QmFja2dyb3VuZFN0eWxlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZFN0eWxlLnByb3BlcnR5LCB0aGlzLmN1cnJlbnRCYWNrZ3JvdW5kU3R5bGUuY29sb3IpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5jdXJyZW50QmFja2dyb3VuZENsYXNzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Rm9udENvbG9yKGNvbG9yOiBzdHJpbmcgfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0Rm9udENvbG9yKCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGlmIChjb2xvci5zdGFydHNXaXRoKCcjJykgfHwgY29sb3Iuc3RhcnRzV2l0aCgncmdiJykpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9udFN0eWxlID0gY29sb3I7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnY29sb3InLCBjb2xvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRGb250Q2xhc3MgPSBgdGV4dC0ke2NvbG9yfWA7XG4gICAgICAgIHRoaXMucmVuZGVyZXIyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmN1cnJlbnRGb250Q2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNldEZvbnRDb2xvcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jdXJyZW50Rm9udFN0eWxlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NvbG9yJywgdGhpcy5jdXJyZW50Rm9udFN0eWxlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudEZvbnRDbGFzcykge1xuICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY3VycmVudEZvbnRDbGFzcyk7XG4gICAgfVxuICB9XG59XG4iXX0=