import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AnimationsModule } from '../animations/animations.module';
import { ColorModule } from '../color/color.module';
import { BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective } from './box.directive';
import { BoxComponent } from './box.component';
import * as ɵngcc0 from '@angular/core';
export { BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective } from './box.directive';
export { BoxComponent } from './box.component';
export class BoxModule {
}
BoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BoxModule });
BoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BoxModule_Factory(t) { return new (t || BoxModule)(); }, imports: [[CommonModule, AnimationsModule, ColorModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BoxModule, { declarations: function () { return [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]; }, imports: function () { return [CommonModule, AnimationsModule, ColorModule]; }, exports: function () { return [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BoxModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, AnimationsModule, ColorModule],
                exports: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective],
                declarations: [BoxComponent, BoxHeaderDirective, BoxContentDirective, BoxFooterDirective, BoxToolsDirective]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL2JveC9ib3gubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRS9DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVEvQyxNQUFNLE9BQU8sU0FBUztBQUN0Qjt1Q0FOQyxRQUFRLFNBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUcsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLG1CQUN2RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUU7UUFBaUIsQ0FBQyxtQkFDdkcsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixDQUFDLGVBQy9HOzs7Ozs7Ozs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUxBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnLi4vYW5pbWF0aW9ucy9hbmltYXRpb25zLm1vZHVsZSc7XG5pbXBvcnQgeyBDb2xvck1vZHVsZSB9IGZyb20gJy4uL2NvbG9yL2NvbG9yLm1vZHVsZSc7XG5pbXBvcnQgeyBCb3hIZWFkZXJEaXJlY3RpdmUsIEJveENvbnRlbnREaXJlY3RpdmUsIEJveEZvb3RlckRpcmVjdGl2ZSwgQm94VG9vbHNEaXJlY3RpdmUgfSBmcm9tICcuL2JveC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQm94Q29tcG9uZW50IH0gZnJvbSAnLi9ib3guY29tcG9uZW50JztcblxuZXhwb3J0IHsgQm94SGVhZGVyRGlyZWN0aXZlLCBCb3hDb250ZW50RGlyZWN0aXZlLCBCb3hGb290ZXJEaXJlY3RpdmUsIEJveFRvb2xzRGlyZWN0aXZlIH0gZnJvbSAnLi9ib3guZGlyZWN0aXZlJztcbmV4cG9ydCB7IEJveENvbXBvbmVudCB9IGZyb20gJy4vYm94LmNvbXBvbmVudCc7XG5cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCAgQW5pbWF0aW9uc01vZHVsZSwgQ29sb3JNb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtCb3hDb21wb25lbnQsIEJveEhlYWRlckRpcmVjdGl2ZSwgQm94Q29udGVudERpcmVjdGl2ZSwgQm94Rm9vdGVyRGlyZWN0aXZlLCBCb3hUb29sc0RpcmVjdGl2ZV0sXG4gICAgZGVjbGFyYXRpb25zOiBbQm94Q29tcG9uZW50LCBCb3hIZWFkZXJEaXJlY3RpdmUsIEJveENvbnRlbnREaXJlY3RpdmUsIEJveEZvb3RlckRpcmVjdGl2ZSwgQm94VG9vbHNEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIEJveE1vZHVsZSB7fVxuIl19