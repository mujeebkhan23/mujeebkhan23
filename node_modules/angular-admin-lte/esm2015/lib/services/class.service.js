import { Injectable, Renderer2, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ClassService {
    constructor(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    applyClasses(cssClasses) {
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        const classesToRemove = this.currentClasses.filter(x => cssClasses.indexOf(x) === -1);
        classesToRemove.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.removeClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Add only classes that are not in currentClasses
        const classesToAdd = cssClasses.filter(x => this.currentClasses.indexOf(x) === -1);
        classesToAdd.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.addClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for future updates
        this.currentClasses = [...cssClasses];
    }
}
ClassService.ɵfac = function ClassService_Factory(t) { return new (t || ClassService)(ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
ClassService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ClassService, factory: ClassService.ɵfac });
ClassService.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClassService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUlsRSxNQUFNLE9BQU8sWUFBWTtBQUN6QixJQUVFLFlBQ1UsVUFBc0IsRUFDdEIsU0FBb0I7QUFDN0IsUUFGUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUNoQyxRQUxVLG1CQUFjLEdBQWEsRUFBRSxDQUFDO0FBQ3hDLElBSUssQ0FBQztBQUNOLElBQ1MsWUFBWSxDQUFDLFVBQTZCO0FBQUksUUFDbkQsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDeEMsWUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QyxTQUFLO0FBQ0wsUUFDSSxpREFBaUQ7QUFDckQsUUFBSSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRixRQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDeEMsWUFBTSxJQUFJLFNBQVMsRUFBRTtBQUNyQixnQkFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3RSxhQUFPO0FBQ1AsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQ0ksa0RBQWtEO0FBQ3RELFFBQUksTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkYsUUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3JDLFlBQU0sSUFBSSxTQUFTLEVBQUU7QUFDckIsZ0JBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDMUUsYUFBTztBQUNQLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUNJLDRDQUE0QztBQUNoRCxRQUFJLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxHQUFJLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLElBQUUsQ0FBQztBQUNIO3dDQWpDQyxVQUFVO29HQUNUO0FBQUM7QUFDVSxZQUxtQixVQUFVO0FBQUksWUFBekIsU0FBUztBQUFHOzs7dUdBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDbGFzc1NlcnZpY2Uge1xuICBwcml2YXRlIGN1cnJlbnRDbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyXG4gICkge31cblxuICBwdWJsaWMgYXBwbHlDbGFzc2VzKGNzc0NsYXNzZXM6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBjc3NDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgb25seSBjbGFzc2VzIHRoYXQgYXJlIG5vdCBpbiBjc3NDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gdGhpcy5jdXJyZW50Q2xhc3Nlcy5maWx0ZXIoeCA9PiBjc3NDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9SZW1vdmUuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBvbmx5IGNsYXNzZXMgdGhhdCBhcmUgbm90IGluIGN1cnJlbnRDbGFzc2VzXG4gICAgY29uc3QgY2xhc3Nlc1RvQWRkID0gY3NzQ2xhc3Nlcy5maWx0ZXIoeCA9PiB0aGlzLmN1cnJlbnRDbGFzc2VzLmluZGV4T2YoeCkgPT09IC0xKTtcbiAgICBjbGFzc2VzVG9BZGQuZm9yRWFjaChjc3NDbGFzc2UgPT4ge1xuICAgICAgaWYgKGNzc0NsYXNzZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyMi5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY3NzQ2xhc3NlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBjdXJyZW50IGNsYXNzZXMgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgdGhpcy5jdXJyZW50Q2xhc3NlcyA9IFsuLi4gY3NzQ2xhc3Nlc107XG4gIH1cbn1cbiJdfQ==