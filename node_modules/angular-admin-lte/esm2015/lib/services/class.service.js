import { Injectable, Renderer2, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ClassService {
    constructor(elementRef, renderer2) {
        this.elementRef = elementRef;
        this.renderer2 = renderer2;
        this.currentClasses = [];
    }
    applyClasses(cssClasses) {
        if (typeof cssClasses === 'string') {
            cssClasses = cssClasses.split(' ');
        }
        // Remove only classes that are not in cssClasses
        const classesToRemove = this.currentClasses.filter(x => cssClasses.indexOf(x) === -1);
        classesToRemove.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.removeClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Add only classes that are not in currentClasses
        const classesToAdd = cssClasses.filter(x => this.currentClasses.indexOf(x) === -1);
        classesToAdd.forEach(cssClasse => {
            if (cssClasse) {
                this.renderer2.addClass(this.elementRef.nativeElement, cssClasse);
            }
        });
        // Update current classes for future updates
        this.currentClasses = [...cssClasses];
    }
}
ClassService.ɵfac = function ClassService_Factory(t) { return new (t || ClassService)(ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
ClassService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ClassService, factory: ClassService.ɵfac });
ClassService.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClassService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Muc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicmFyeS9hbmd1bGFyLWFkbWluLWx0ZS9zcmMvbGliL3NlcnZpY2VzL2NsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUlsRSxNQUFNLE9BQU8sWUFBWTtBQUN4QixJQUVDLFlBQ1UsVUFBc0IsRUFDdEIsU0FBb0I7QUFDNUIsUUFGUSxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQ2xDLFFBQVksY0FBUyxHQUFULFNBQVMsQ0FBVztBQUMvQixRQUxTLG1CQUFjLEdBQWEsRUFBRSxDQUFDO0FBRXhDLElBR0ssQ0FBQztBQUVOLElBQVMsWUFBWSxDQUFDLFVBQTZCO0FBQUssUUFDcEQsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDdkMsWUFBSyxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QyxTQUFJO0FBRUwsUUFBSSxpREFBaUQ7QUFDcEQsUUFBRyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RixRQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDdkMsWUFBSyxJQUFJLFNBQVMsRUFBRTtBQUNwQixnQkFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1RSxhQUFNO0FBQ04sUUFBRyxDQUFDLENBQUMsQ0FBQztBQUVQLFFBQUksa0RBQWtEO0FBQ3JELFFBQUcsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEYsUUFBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0FBQ3BDLFlBQUssSUFBSSxTQUFTLEVBQUU7QUFDcEIsZ0JBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDekUsYUFBTTtBQUNOLFFBQUcsQ0FBQyxDQUFDLENBQUM7QUFFUCxRQUFJLDRDQUE0QztBQUMvQyxRQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxHQUFJLFVBQVUsQ0FBQyxDQUFDO0FBQzFDLElBQUMsQ0FBQztBQUNGOzBDQWpDQSxVQUFVO29HQUNSO0FBQUU7QUFDVyxZQUxnQixVQUFVO0FBQUssWUFBMUIsU0FBUztBQUFJOzs7O0FBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWhDQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2xhc3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjdXJyZW50Q2xhc3Nlczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjI6IFJlbmRlcmVyMlxuICApIHt9XG5cbiAgcHVibGljIGFwcGx5Q2xhc3Nlcyhjc3NDbGFzc2VzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgY3NzQ2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNzc0NsYXNzZXMgPSBjc3NDbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9ubHkgY2xhc3NlcyB0aGF0IGFyZSBub3QgaW4gY3NzQ2xhc3Nlc1xuICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IHRoaXMuY3VycmVudENsYXNzZXMuZmlsdGVyKHggPT4gY3NzQ2xhc3Nlcy5pbmRleE9mKHgpID09PSAtMSk7XG4gICAgY2xhc3Nlc1RvUmVtb3ZlLmZvckVhY2goY3NzQ2xhc3NlID0+IHtcbiAgICAgIGlmIChjc3NDbGFzc2UpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNzc0NsYXNzZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgb25seSBjbGFzc2VzIHRoYXQgYXJlIG5vdCBpbiBjdXJyZW50Q2xhc3Nlc1xuICAgIGNvbnN0IGNsYXNzZXNUb0FkZCA9IGNzc0NsYXNzZXMuZmlsdGVyKHggPT4gdGhpcy5jdXJyZW50Q2xhc3Nlcy5pbmRleE9mKHgpID09PSAtMSk7XG4gICAgY2xhc3Nlc1RvQWRkLmZvckVhY2goY3NzQ2xhc3NlID0+IHtcbiAgICAgIGlmIChjc3NDbGFzc2UpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlcjIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGNzc0NsYXNzZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgY3VycmVudCBjbGFzc2VzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgIHRoaXMuY3VycmVudENsYXNzZXMgPSBbLi4uIGNzc0NsYXNzZXNdO1xuICB9XG59XG4iXX0=